* SSH CheatSheet                                               :Tools:
:PROPERTIES:
:type:     ssh
:export_file_name: cheatsheet-ssh-A4.pdf
:END:

#+BEGIN_HTML
<a href="https://github.com/dennyzhang/cheatsheet-ssh-A4"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
<div id="the whole thing" style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>

<br/><br/>
<a href="http://makeapullrequest.com" target="_blank" rel="nofollow"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg" alt="PRs Welcome"/></a>
#+END_HTML

- PDF Link: [[https://github.com/dennyzhang/cheatsheet-ssh-A4/blob/master/cheatsheet-ssh-A4.pdf][cheatsheet-ssh-A4.pdf]]
- Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-ssh
- Category: [[https://cheatsheet.dennyzhang.com/category/tools][tools]]

File me [[https://github.com/DennyZhang/cheatsheet-ssh-A4/issues][Issues]] or star [[https://github.com/DennyZhang/cheatsheet-ssh-A4][this repo]].

See more CheatSheets from Denny: [[https://github.com/topics/denny-cheatsheets][#denny-cheatsheets]]
** ssh general
| Name                                        | Summary                                                                                   |
|---------------------------------------------+-------------------------------------------------------------------------------------------|
| run ssh command by muting host key check    | =ssh -o StrictHostKeyChecking=no root@192.168.75.109 date=                                |
| ssh tunnel                                  | =ssh -N -p 22 -i <ssh-keyfile> -f root@172.17.0.8 -L *:18085:localhost:8085 -n /bin/bash= |
| ssh agent load key                          | =exec ssh-agent bash && ssh-keygen=, =ssh-add=                                            |
| generate a new key pair                     | =ssh-keygen=, =ssh-keygen -C "your_email@example.com" -t rsa=                             |
| generate a new key pair without interaction | =ssh-keygen -t rsa -f /tmp/sshkey -N "" -q=                                               |
| [[https://www.digitalocean.com/community/tutorials/how-to-protect-ssh-with-fail2ban-on-ubuntu-14-04][fail2ban]]                                    | protect SSH server from brute force attacks                                               |

** advanced ssh
| Name                                 | Summary                                                                                               |
|--------------------------------------+-------------------------------------------------------------------------------------------------------|
| Diff local file with remote ssh file | =diff local_file.txt <(ssh user@remote_host 'cat remote_file.txt')=                                   |
| Diff two remote ssh files            | =diff <(ssh user@remote_host 'cat remote_file.txt') <(ssh user2@remote_host2 'cat remote_file2.txt')= |
** ssh security
| Name                                     | Summary                                                                                  |
|------------------------------------------+------------------------------------------------------------------------------------------|
| Disable ssh by password                  | =sed -i 's/PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config= |
| Disable root login                       | =sed -i 's/^PermitRootLogin yes/#PermitRootLogin yes/' /etc/ssh/sshd_config=             |
| Enable/Disable SSH Host Key Checking     | =StrictHostKeyChecking yes= change ~/.ssh/config                                         |
| Add passphrase protection to ssh keyfile | =ssh-keygen -p -f id_rsa=  [[https://www.dennyzhang.com/ssh_passphrase][link: Manage SSH Key File With Passphrase]]                     |

** scp
| Name                   | Summary                                                                     |
|------------------------+-----------------------------------------------------------------------------|
| Download remote folder | =scp -r -i <ssh-keyfile> ec2-user@<ssh-host>:/home/letsencrypt-20180825 ./= |

** parse ssh log
| Name                    | Command                                                                        |
|-------------------------+--------------------------------------------------------------------------------|
| ssh down                | =grep -R "ssh.*Received signal 15" /var/log/auth.log=                          |
| ssh up                  | =grep -R "sshd.*Server listening" /var/log/auth.log=                           |
| ssh failed login        | =grep -R "sshd.*Failed password for invalid user" /var/log/auth.log=           |
| ssh break-in attemp     | =grep -R "sshd.*POSSIBLE BREAK-IN ATTEMPT!" /var/log/auth.log=                 |
| ssh port scap           | =grep -R "sshd.*Bad protocol version identification" /var/log/auth.log=        |
| ssh login by public key | =grep -R "sshd.*Accepted publickey for" /var/log/auth.log=                     |
| ssh login by password   | =grep -R "sshd.*Accepted password for" /var/log/auth.log=                      |
| ssh logout event        | =grep -R "sshd.*pam_unix(sshd:session): session closed for" /var/log/auth.log= |
** Common Config
- Inject ssh public key
#+BEGIN_EXAMPLE
echo "ssh-rsa AAA...0r contact@dennyzhang.com" >>  ~/.ssh/authorized_keys
#+END_EXAMPLE

- Define ssh alias
#+BEGIN_EXAMPLE
Host sandbox
     HostName 192.168.50.10
     StrictHostKeyChecking no
     User root
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Host 192.168.1.*
   StrictHostKeyChecking no
   Port 32882
   UserKnownHostsFile=/dev/null
   IdentityFile ~/.ssh/id_rsa
#+END_EXAMPLE

- Turn off host key checking for all hosts
#+BEGIN_EXAMPLE
# In ~/.ssh/config or /etc/ssh/ssh_config

Host *
    StrictHostKeyChecking no
#+END_EXAMPLE

- Use expect to run ssh command with credential auto input
#+begin_example exp
#!/usr/bin/expect
set timeout 20
set command "cat /etc/hosts"
set user "vagrant"
set password "vagrant"
set ip "192.168.50.10"
spawn ssh -o stricthostkeychecking=no $user@$ip "$command"
expect "*password:*"
send "$password\r"
expect eof;
#+end_example

- ssh reverse tunnel
#+BEGIN_EXAMPLE
# https://www.howtoforge.com/reverse-ssh-tunneling

autossh -M 40000 -p 2702 -i /home/denny/al -fN \
    -o "PubkeyAuthentication=yes" \
    -o "StrictHostKeyChecking=false" -o "PasswordAuthentication=no" \
    -o "ServerAliveInterval 60" -o "ServerAliveCountMax 3" \
    -R 123.57.240.189:29995:localhost:22 root@123.57.240.189
#+END_EXAMPLE
** More Resources
License: Code is licensed under [[https://www.dennyzhang.com/wp-content/mit_license.txt][MIT License]].
#+BEGIN_HTML
<a href="https://www.dennyzhang.com"><img align="right" width="201" height="268" src="https://raw.githubusercontent.com/USDevOps/mywechat-slack-group/master/images/denny_201706.png"></a>
<a href="https://www.dennyzhang.com"><img align="right" src="https://raw.githubusercontent.com/USDevOps/mywechat-slack-group/master/images/dns_small.png"></a>

<a href="https://www.linkedin.com/in/dennyzhang001"><img align="bottom" src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a>
<a href="https://github.com/dennyzhang"><img align="bottom"src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a>
<a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img align="bottom" src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a>
#+END_HTML
* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION:
#+KEYWORDS:
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:
#+LINK_HOME:
* TODO [#A] Blog: Advanced Usage Of SSH                            :noexport:
** ssh -v
** [#A] Configure EC2 instance for ssh login                      :IMPORTANT:
sudo su -
sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config
sed -i 's/^#PermitRootLogin yes/PermitRootLogin yes/' /etc/ssh/sshd_config

sed -i 's/no-port-forwarding,no-agent-forwarding.*//g'  ~/.ssh/authorized_keys

echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAwp69ZIA8Usz5EgSh5gBXKGFZBUawP8nDSgZVW6Vl/+NDhij5Eo5BePYvUaxg/5aFxrxROOyLGE9xhNBk7PP49Iz1pqO9T/QNSIiuuvQ/Xhpvb4OQfD5xr6l4t/9gLf+OYGvaFHf/xzMnc9cKzZ+azLlDHbeewu1GMI/XNFWo4VWAsH+6xM8VIpdJSaR7alJn/W6dmyRBbk0uS3Yut63jVFk4zalAzXquU0BX1ne+DLB/LW8ZanN5PWECabSi4dXYLfxC2rDhDcQdXU3MwV5b7TtR5rFoNS8IGcyHoeq5tasAtAAaD2sEzyJbllAfFsNyxNQ+Yh8935HcWqx2/T0r filebat.mark@gmail.com" >> ~/.ssh/authorized_keys

echo "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA2aRNnkifPeQIR0MtLyFZo2RSSbUVP/vrkGii3VkqNS8vcX88taO3Iv5Y0kD+4CE4qDJe75fxDXbu7IkSuqHrNb/jBrSZKY3KC8EO2lHYv3MMiwCk5rBMTRiZicOKEG2gQM/9fisXCTQamu48M75nyyU5LHptz5TnonLnum0e098JRbxL9UkdWBesEz/JO5TEhy1T0K2c6W6d+cFz0Bkz83gXLGK+KVWWHLJ7/YFd7gVj2ihM6RdSCWxrHeH9riQ8ALW1tkRF0jlsmxiAvvfaT21fmEltYAeZBUdfzgcseRSbM4b0vVp9BKatMoHEBk6pMZhp0r1A/rfH7tu4+yQfBw== root@osc-serv-01" >> ~/.ssh/authorized_keys

service ssh restart

Check with some other VM by username and pssword, not ssh keyfile
** DONE ssh-add fail: Could not open a connection to your authentication agent.
  CLOSED: [2012-01-04 Wed 11:26]
http://forum.slicehost.com/comments.php?DiscussionID=3385\\

http://funkaoshi.com/blog/could-not-open-a-connection-to-your-authentication-agent\\

exec ssh-agent bash

ssh-agent

ssh-add
*** console shot:                                                  :noexport:
#+begin_example
bash-3.2$ ssh-add /var/lib/hudson/.ssh/id_rsa
Could not open a connection to your authentication agent.
#+end_example
** TODO SSH login authentication method: publickey,gssapi-keyex,gssapi-with-mic,password
** DONE sshd出现问题: /etc/ssh/ssh_config
  CLOSED: [2013-08-23 Fri 15:10]
ServerAliveInterval 60
** DONE Server keeps asking for password after I've copied my SSH Public Key to authorized_keys: /root/ should be 700, instead of 777
  CLOSED: [2015-02-25 Wed 09:03]
http://askubuntu.com/questions/110814/server-keeps-asking-for-password-after-ive-copied-my-ssh-public-key-to-authoriz
http://serverfault.com/questions/360496/i-created-an-rsa-key-but-ssh-keeps-asking-the-password
*** /var/log/auth.log
#+BEGIN_EXAMPLE
root@fluig-id-cdn-01:~/.ssh# tail -f /var/log/auth.log
tail -f /var/log/auth.log
Feb 25 15:00:00 fluig-id-cdn-01 sshd[48492]: Authentication refused: bad ownership or modes for directory /root

Feb 25 15:00:01 fluig-id-cdn-01 CRON[48515]: pam_unix(cron:session): session opened for user root by (uid=0)
Feb 25 15:00:01 fluig-id-cdn-01 CRON[48515]: pam_unix(cron:session): session closed for user root
Feb 25 15:00:01 fluig-id-cdn-01 sudo:   nagios : TTY=unknown ; PWD=/ ; USER=root ; COMMAND=/usr/bin/python /usr/lib/nagios/plug
#+END_EXAMPLE
*** /root/ acl issue
#+BEGIN_EXAMPLE
root@fluig-id-cdn-01:~/.ssh# ls -lth / | grep 'root$'
ls -lth / | grep 'root$'
drwxrwxrwx  11 root root  4.0K Feb 25 14:50 root
root@fluig-id-cdn-01:~/.ssh# chmod 700 /root/
chmod 700 /root/
#+END_EXAMPLE
** DONE MDM-1299: After modifying ssh authorized_keys, ssh still keep asking password: wrong acl for /root/.ssh
  CLOSED: [2015-11-22 Sun 03:36]
http://totvslab.atlassian.net/browse/MDM-1299

Root cause is found: acl of /root/.ssh/ is incorrect. It must be 0700, instead of 0777.

pull request: https://github.com/TOTVS/mdmdevops/pull/5

Verified by testing
- Test app-mdm deployment for MDM-1299-ssh branch: ssh without password shall work
  http://10.165.4.67:48080/job/DockerDeployBasicCookbooks/146/console
- Test app-mdm deployment for dev branch branch: ssh without password shall not work
  http://10.165.4.67:48080/job/DockerDeployBasicCookbooks/147/console
*** useful link
http://unix.stackexchange.com/questions/36540/why-am-i-still-getting-a-password-prompt-with-ssh-with-public-key-authentication
http://askubuntu.com/questions/110814/server-keeps-asking-for-password-after-ive-copied-my-ssh-public-key-to-authoriz
http://serverfault.com/questions/396935/ssh-keys-authentication-keeps-asking-for-password
** DONE ssh tunnel: bind: Cannot assign requested address:  force the ssh client to use ipv4
  CLOSED: [2015-12-02 Wed 22:54]
http://serverfault.com/questions/444295/ssh-tunnel-bind-cannot-assign-requested-address
http://ubuntuforums.org/showthread.php?t=1387297

https://www.clearos.com/clearfoundation/social/community/ssh-port-forwarding-between-clearos-and-remote-server

The close the loop here. The answer, in this case, was to force the ssh client to use ipv4. E.g.

ssh -4 -D 8081 user@8.8.8.8

#+BEGIN_EXAMPLE
root@iZ25y7u44dnZ:~# ssh -i /home/denny/denny -N -p 10040 -f root@123.56.44.213 -L 38080:localhost:28080 -n /bin/bash
bind: Cannot assign requested address
#+END_EXAMPLE
** [#A] autossh configuration                                     :IMPORTANT:
https://www.everythingcli.org/ssh-tunnelling-for-fun-and-profit-autossh/
https://linuxaria.com/howto/permanent-ssh-tunnels-with-autossh

vim /etc/ssh/sshd_config
GatewayPorts yes

# reverse tunnel
autossh -M 29996 -i /home/denny/test -fN -o "PubkeyAuthentication=yes" -o "StrictHostKeyChecking=false" -o "PasswordAuthentication=no" -o "ServerAliveInterval 60" -o "ServerAliveCountMax 3" -R 54.179.178.214:29995:localhost:22 root@54.179.178.214

ssh -i /home/denny/test -fN -o "PubkeyAuthentication=yes" -o "StrictHostKeyChecking=false" -o "PasswordAuthentication=no" -o "ServerAliveInterval 60" -o "ServerAliveCountMax 3" -R 54.179.178.214:29995:localhost:22 root@54.179.178.214

# ssh tunnel
ssh -i /home/denny/test1 -4 -N -p 19995 -f root@123.57.240.189 -L *:48080:localhost:48080 -n /bin/bash

autossh -M 48081 -4 -p 19995 -i /home/denny/test1 -fN -o "PubkeyAuthentication=yes" -o "StrictHostKeyChecking=false" -o "PasswordAuthentication=no" -o "ServerAliveInterval 60" -o "ServerAliveCountMax 3" -L  123.57.240.189:48080:localhost:48080 root@123.57.240.189
*** web page: Aptible Blog Archives - Reverse SSH tunneling with AWS
http://aptible-archives.tumblr.com/post/56897638120/reverse-ssh-tunneling-with-aws
**** webcontent                                                    :noexport:
#+begin_example
Location: http://aptible-archives.tumblr.com/post/56897638120/reverse-ssh-tunneling-with-aws
[web-horizo]

Aptible Blog Archives

This is an archive of posts from 2013, before we moved the main Aptible blog to a shared account.

You can visit us at our main site or the current blog.

Feel free to call us at (866) 296-5003 if you have questions about HIPAA.
This is an archive of posts from 2013, before we moved the main Aptible blog to a shared account.

You can visit us at our main site or the current blog.

Feel free to call us at (866) 296-5003 if you have questions about HIPAA.

  * rss
  * archive

  * Reverse SSH tunneling with AWS

    I mostly blog about healthcare here, but I wanted to put up a quick tutorial on reverse
    tunneling for developers. There are plenty of explanations out there, but I wanted to write one
    that is simple, easy to understand, and repeatable.

    What is reverse tunneling, and why is it useful for web developers?

    SSH, or Secure Shell, is a cryptographic network protocol that allows us to set up secure
    connections between computers over an unsecure network, like the Internet. We can use it to run
    commands, forward ports, and transfer files. We can also use it to create a secure "tunnel" by
    wrapping unencrypted protocols (such as HTTP) in encryption.

    Normal tunneling forwards a port on a local machine to a port on a remote machine. Reverse
    tunneling forwards a port on a remote machine to a port on a local machine.

    This is useful because it allows us to direct third-party services and devices to a remote
    machine that is exposed to the Internet. Those requests will then be forwarded to our local
    machine. It's faster than deploying to a staging server.

    I use it mostly to check how my iPhone and iPad are displaying CSS media queries, in addition
    to the Safari Developer tools.

    How to set up a reverse tunnel

    First off, you don't have to DIY. You can use Localtunnel or Forward for this. I like setting
    up my own because it's easy, responsive, and gives me a lot of control.

    How easy is it? There are four steps:

     1. Start a server, configured to allow reverse ssh tunneling
     2. Configure our local ssh settings
     3. ?
     4. PROFIT

    Ok, the real steps:

     1. Configure and start a server
     2. Configure our local ssh settings
     3. Configure server ssh settings and reload ssh config
     4. Establish the reverse tunnel

    I'm using OS X Terminal, OpenSSH and Amazon Web Services.

    Step 1: Configure and Start a Server

    We are going to launch an EC2 instance using the AWS Management Console interface. Go into the
    EC2 Mangement Console, go under Instances, and hit the "Launch Instance" button. You should see
    the Quick Launch Wizard:

    image

      + Name your instance
      + You may need to create and download a keypair
      + I like Ubuntu Server 12.04.2 LTS

    Hit "Continue." Next, let's edit the instance details.

    image

    I just use a t1.micro. If you want something beefier, select it under the Instance Details
    radio button.

    Under Security Settings:

    image

      + Create a new Security Group
      + Call it something like "Reverse SSH Tunnel", add a description
      + Add a rule to allow access on port 22 (SSH) at source 0.0.0.0/0
      + Add another rule to allow access on port 3000 (or whatever port you want to forward traffic
        from) at source 0.0.0.0/0
      + Create the Security Group
      + Select that group and hit Save Details
      + Launch the instance

    Note that you can also launch an instance and edit the Security Group afterwards. The process
    is similar.

    Optional: Assign an Elastic IP

    When your instance launches, you will see it is assigned a default IP address, something like
    ec2-54-211-63-58.compute-1.amazonaws.com. To make that a little more manageable, and to persist
    an IP across starting/stopping an instance, let's assign an Elastic IP.

     1. Under Network & Security, go to Elastic IPs
     2. Allocate a New Address, in EC2
     3. Associate the Address with your instance

    Now when you select your instance, you should see something like this, with a nice static IP:

    image

    Step 2: Configure Local SSH Settings

    Find the *.pem key you downloaded and copy it to your ~/.ssh folder. For me this was:

    $ mv ~/Downloads/reverse-ssh-key.pem ~/.ssh

    AWS requires us to set the permissions on our key so that only the owner may read it.

    $ chmod 600 ~/.ssh/reverse-ssh-key.pem

    To avoid having to pass in a long set of parameters every time we want to open the tunnel, we
    can edit the ~/.ssh/config file to include:

    host 54.227.245.213
        user ubuntu
        StrictHostKeyChecking no
        UserKnownHostsFile /dev/null
        CheckHostIP no
        IdentityFile ~/.ssh/reverse-ssh-key.pem
        ServerAliveInterval 120

    Hit $ man ssh_config to read about these options.

      + Host is the IP address of the instance we fired up.
      + User should be whatever your OS prefers. If you use Amazon's Linux AMI, it will want you to
        log in as "ec2-user." Ubuntu will let you start a console as root, but will want you to be
        a normal user for other tasks.
      + Several options have to do with checking/managing keys. I'm ok here because we are just
        connecting to a specified IP. If you wanted to be paranoid then...you shouldn't be following
        this tutorial.
      + ServerAliveInterval pings the remote host every n seconds, to keep the connection alive.
        Not setting it will eventually result in a "Write failed: Broken pipe" error.

    Save and open a new shell window to load the new config.

    Step 3: Configure Server SSH Settings and Reload SSH Config

    Check that you can ssh into your server now:

    $ ssh 54.227.245.213

    image

    Awesome.

    Finally, we have to configure the port binding on the instance. Get into the sshd_config file
    with write access and add "GatewayPorts yes".

    ubuntu@ip-10-147-225-211:~$ sudo vim /etc/ssh/sshd_config

    image

    (In vim, arrow scroll to where you want to insert, hit "i" to insert, esc to end the insert,
    ":w" to save, ":q" to quit.)

    If you need to not bind everything on the wildcard, you can set GatewayPorts to other things.
    ($ man ssh and $ man sshd_config it.)

    Finally, reload the ssh configuration and exit the session:

    ubuntu@ip-10-147-225-211:~$ sudo reload ssh
    ubuntu@ip-10-147-225-211:~$ exit

    Step 4: Establish the Reverse Tunnel

    Now it's time for magic. Fire up a local server. I'm using port 3000. The syntax for reverse
    tunneling is:

    $ ssh -R [bind_address:]port:host:hostport address

    With GatewayPorts set to "yes" on the server, we can leave out the bind_address. So:

    $ ssh -R 3000:localhost:3000 54.227.245.213

    means that port 3000 on the remote server is to be forwarded to the given host and port on the
    local side. Remember, if you want to use a different remote port, you need to allow access in
    your EC2 Security Group settings.

    You should be able to point a web browser at the specified port on your server
    (54.227.245.213:3000 here) and interact with your development environment.

    Optional: Add an Alias

    The last thing I'm going to do is add an alias in my ~/.bashrc file:

    alias devtunnel="ssh -NR 3000:localhost:3000 54.227.245.213"

    -N runs the ssh session without executing a remote command. You can also run it with -f to send
    it to background.

    Now, after I open a new shell window, I can start a new tunnel with:

    $ devtunnel

    That's it. Enjoy.

      +
          o
          o
      + July 30, 2013 (3:20 pm)
      + #reverse tunnel
      + #ssh
      + #aws

© 2013–2016 Aptible Blog Archives [impixu][impixu]

#+end_example
** DONE remote port forwarding failed for listen port
  CLOSED: [2016-05-21 Sat 07:32]
http://bbrinck.com/post/2318562750/reverse-ssh-tunneling-easier-than-port
http://serverfault.com/questions/595323/ssh-remote-port-forwarding-failed
#+BEGIN_EXAMPLE
Note: Sometimes, when a SSH connection dies (as it will if you shut your laptop to move to another location), the port on the remote machine will stay open. If this happens, you'll see this error when you try to create the reverse tunnel:

Warning: remote port forwarding failed for listen port 3000

If this happens, you can either use a new port or do the following:

Find the process that is using port 3000 (look for the PID - you'll need to run the command with sudo to see the PIDs):
sudo netstat -anp
Kill the stale process:
kill PID
#+END_EXAMPLE
** DONE create a banner/welcome-note for SSH server: /etc/ssh/sshd_config: Banner file
   CLOSED: [2016-09-23 Fri 00:26]
https://crybit.com/create-a-banner-ssh-server/

[root@localhost ~]# vim /etc/ssh/sshd_config
-----
#Banner none
Banner /etc/ssh/welcome.txt

vim /etc/ssh/welcome.txt
** DONE SSH security – weak ciphers and mac algorithms
  CLOSED: [2017-01-23 Mon 15:07]
/etc/ssh/sshd_config: Ciphers and MACs sections
http://linux.uits.uconn.edu/2014/06/25/ssh-weak-ciphers-and-mac-algorithms/
https://www.ssh.com/manuals/server-admin/44/Ciphers_and_MACs.html
http://blog.xuite.net/magurayu/wretch/417764135-SSH+Weak+Algorithms+Supported

ssh -vvv -p 2702 root@45.33.87.74 date 2>&1 | grep cipher

arcfour
*** [#A] error message: 90317 - SSH Weak Algorithms Supported
Synopsis
The remote SSH server is configured to allow weak encryption algorithms or no algorithm at all.
Description
Nessus has detected that the remote SSH server is configured to use the Arcfour stream cipher or no cipher at all. RFC 4253 advises against using Arcfour due to an issue with weak keys.
See Also
https://tools.ietf.org/html/rfc4253#section-6.3
*** TODO 71049 - SSH Weak MAC Algorithms Enabled
Synopsis
The remote SSH server is configured to allow MD5 and 96-bit MAC algorithms.
Description
The remote SSH server is configured to allow either MD5 or 96-bit MAC algorithms, both of which are considered weak.

Note that this plugin only checks for the options of the SSH server, and it does not check for vulnerable software versions.
*** How to fix: SSH Weak Algorithms Supported
#+BEGIN_EXAMPLE
在ssh_config及sshd_config加入以下兩行

Ciphers aes256-ctr,aes192-ctr,aes128-ctr,aes256-cbc,aes192-cbc,aes128-cbc,3des-cbc
MACs hmac-sha1
#+END_EXAMPLE
*** Ciphers: The system will attempt to use the different encryption ciphers in the sequence specified on the line
https://www.ssh.com/manuals/server-admin/44/Ciphers_and_MACs.html

https://tools.ietf.org/html/rfc4253#section-6.3

An encryption algorithm and a key will be negotiated during the key
   exchange.  When encryption is in effect, the packet length, padding
   length, payload, and padding fields of each packet MUST be encrypted
   with the given algorithm.

   The encrypted data in all packets sent in one direction SHOULD be
   considered a single data stream.  For example, initialization vectors
   SHOULD be passed from the end of one packet to the beginning of the
   next packet.  All ciphers SHOULD use keys with an effective key
   length of 128 bits or more.

   The ciphers in each direction MUST run independently of each other.
   Implementations MUST allow the algorithm for each direction to be
   independently selected, if multiple algorithms are allowed by local
   policy.  In practice however, it is RECOMMENDED that the same
   algorithm be used in both directions.
*** MAC (Message Authentication Code)
The system will attempt to use the different HMAC algorithms in the sequence they are specified on the line.

https://www.ssh.com/manuals/server-admin/44/Ciphers_and_MACs.html

https://tools.ietf.org/html/rfc4253#section-6.4

6.4.  Data Integrity

   Data integrity is protected by including with each packet a MAC that
   is computed from a shared secret, packet sequence number, and the
   contents of the packet.

   The message authentication algorithm and key are negotiated during
   key exchange.  Initially, no MAC will be in effect, and its length
   MUST be zero.  After key exchange, the 'mac' for the selected MAC
   algorithm will be computed before encryption from the concatenation
   of packet data:

      mac = MAC(key, sequence_number || unencrypted_packet)

   where unencrypted_packet is the entire packet without 'mac' (the
   length fields, 'payload' and 'random padding'), and sequence_number
   is an implicit packet sequence number represented as uint32.  The
   sequence_number is initialized to zero for the first packet, and is
   incremented after every packet (regardless of whether encryption or
   MAC is in use).  It is never reset, even if keys/algorithms are
   renegotiated later.  It wraps around to zero after every 2^32
   packets.  The packet sequence_number itself is not included in the
   packet sent over the wire.

   The MAC algorithms for each direction MUST run independently, and
   implementations MUST allow choosing the algorithm independently for
   both directions.  In practice however, it is RECOMMENDED that the
   same algorithm be used in both directions.

   The value of 'mac' resulting from the MAC algorithm MUST be
   transmitted without encryption as the last part of the packet.  The
   number of 'mac' bytes depends on the algorithm chosen.
** DONE ssh security: 70658 - SSH Server CBC Mode Ciphers Enabled
   CLOSED: [2017-01-23 Mon 15:29]
https://developer.ibm.com/answers/questions/187318/faq-how-do-i-disable-cipher-block-chaining-cbc-mod.html
*** error message
70658 - SSH Server CBC Mode Ciphers Enabled	[-/+]
Synopsis
The SSH server is configured to use Cipher Block Chaining.
Description
The SSH server is configured to support Cipher Block Chaining (CBC) encryption. This may allow an attacker to recover the plaintext message from the ciphertext.

Note that this plugin only checks for the options of the SSH server and does not check for vulnerable software versions.
** DONE ssh security: hide linux OS version
  CLOSED: [2017-01-23 Mon 15:56]
http://serverfault.com/questions/216801/prevent-ssh-from-advertising-its-version-number

While it's prohibitively difficult to hide the version number of your SSH daemon, you can easily hide the linux version (Debian-3ubuntu4)

Add the following line to /etc/ssh/sshd_config

DebianBanner no

From:
#+BEGIN_EXAMPLE
debug1: Local version string SSH-2.0-OpenSSH_7.3
debug1: Remote protocol version 2.0, remote software version OpenSSH_6.6.1p1 Ubuntu-2ubuntu2.8
debug1: match: OpenSSH_6.6.1p1 Ubuntu-2ubuntu2.8 pat OpenSSH_6.6.1* compat 0x04000000
#+END_EXAMPLE

To:
#+BEGIN_EXAMPLE
debug1: Local version string SSH-2.0-OpenSSH_7.3
debug1: Remote protocol version 2.0, remote software version OpenSSH_6.6.1p1
#+END_EXAMPLE
** TODO ssh security: 10267 - SSH Server Type and Version Information
https://www.cyberciti.biz/faq/howto-ssh-server-hide-version-number-sshd_config/
OpenSSH Hide Version Number From Clients

#+BEGIN_EXAMPLE
10267 - SSH Server Type and Version Information	[-/+]
Synopsis
An SSH server is listening on this port.
Description
It is possible to obtain information about the remote SSH server by sending an empty authentication request.
#+END_EXAMPLE
** TODO ssh security: 70657 - SSH Algorithms and Languages Supported
https://www.tenable.com/plugins/index.php?view=single&id=70657
#+BEGIN_EXAMPLE
70657 - SSH Algorithms and Languages Supported	[-/+]
Synopsis
An SSH server is listening on this port.
Description
This script detects which algorithms and languages are supported by the remote service for encrypting communications.
Solution
n/a
Risk Factor
None
Plugin Information:
Publication date: 2013/10/28, Modification date: 2014/04/04
Ports
tcp/2702

Nessus negotiated the following encryption algorithm with the server : aes128-cbc

The server supports the following options for kex_algorithms :

curve25519-sha256@libssh.org
diffie-hellman-group-exchange-sha1
diffie-hellman-group-exchange-sha256
diffie-hellman-group1-sha1
diffie-hellman-group14-sha1
ecdh-sha2-nistp256
ecdh-sha2-nistp384
ecdh-sha2-nistp521

The server supports the following options for server_host_key_algorithms :

ecdsa-sha2-nistp256
ssh-dss
ssh-ed25519
ssh-rsa

The server supports the following options for encryption_algorithms_client_to_server :

3des-cbc
aes128-cbc
aes128-ctr
aes128-gcm@openssh.com
aes192-cbc
aes192-ctr
aes256-cbc
aes256-ctr
aes256-gcm@openssh.com
arcfour
arcfour128
arcfour256
blowfish-cbc
cast128-cbc
chacha20-poly1305@openssh.com
rijndael-cbc@lysator.liu.se

The server supports the following options for encryption_algorithms_server_to_client :

3des-cbc
aes128-cbc
aes128-ctr
aes128-gcm@openssh.com
aes192-cbc
aes192-ctr
aes256-cbc
aes256-ctr
aes256-gcm@openssh.com
arcfour
arcfour128
arcfour256
blowfish-cbc
cast128-cbc
chacha20-poly1305@openssh.com
rijndael-cbc@lysator.liu.se

The server supports the following options for mac_algorithms_client_to_server :

hmac-md5
hmac-md5-96
hmac-md5-96-etm@openssh.com
hmac-md5-etm@openssh.com
hmac-ripemd160
hmac-ripemd160-etm@openssh.com
hmac-ripemd160@openssh.com
hmac-sha1
hmac-sha1-96
hmac-sha1-96-etm@openssh.com
hmac-sha1-etm@openssh.com
hmac-sha2-256
hmac-sha2-256-etm@openssh.com
hmac-sha2-512
hmac-sha2-512-etm@openssh.com
umac-128-etm@openssh.com
umac-128@openssh.com
umac-64-etm@openssh.com
umac-64@openssh.com

The server supports the following options for mac_algorithms_server_to_client :

hmac-md5
hmac-md5-96
hmac-md5-96-etm@openssh.com
hmac-md5-etm@openssh.com
hmac-ripemd160
hmac-ripemd160-etm@openssh.com
hmac-ripemd160@openssh.com
hmac-sha1
hmac-sha1-96
hmac-sha1-96-etm@openssh.com
hmac-sha1-etm@openssh.com
hmac-sha2-256
hmac-sha2-256-etm@openssh.com
hmac-sha2-512
hmac-sha2-512-etm@openssh.com
umac-128-etm@openssh.com
umac-128@openssh.com
umac-64-etm@openssh.com
umac-64@openssh.com

The server supports the following options for compression_algorithms_client_to_server :

none
zlib@openssh.com

The server supports the following options for compression_algorithms_server_to_client :

none
zlib@openssh.com
#+END_EXAMPLE
** TODO ssh security: 10881 - SSH Protocol Versions Supported
#+BEGIN_EXAMPLE
	10881 - SSH Protocol Versions Supported	[-/+]
Synopsis
A SSH server is running on the remote host.
Description
This plugin determines the versions of the SSH protocol supported by the remote SSH daemon.
Solution
n/a
Risk Factor
None
Plugin Information:
Publication date: 2002/03/06, Modification date: 2013/10/21
Ports
tcp/2702
The remote SSH daemon supports the following versions of the
SSH protocol :

- 1.99
- 2.0
#+END_EXAMPLE
** DONE fail to ssh: No supported key exchange algorithms: /etc/ssh/ssh_host_rsa_key is zero length
  CLOSED: [2017-04-17 Mon 20:50]
http://serverfault.com/questions/158151/sshd-shuts-down-with-no-supported-key-exchange-algorithms-error

/etc/ssh/ssh_host_rsa_key is zero length

#+BEGIN_EXAMPLE
I ran into this problem on Fedora. Eventually I noticed:

root@wisdom:/etc/ssh# ll
total 268K
drwxr-xr-x.   2 root root     4.0K Jun 30 06:06 ./
drwxr-xr-x. 128 root root      12K Jun 30 05:15 ../
-rw-r--r--.   1 root root     237K Jun  8 23:30 moduli
-rw-r--r--.   1 root root     2.2K Jun  8 23:30 ssh_config
-rw-------.   1 root root     4.3K Jun 30 06:03 sshd_config
-rw-r-----.   1 root ssh_keys    0 Jun 27 00:46 ssh_host_ecdsa_key
-rw-r--r--.   1 root root        0 Jun 27 00:46 ssh_host_ecdsa_key.pub
-rw-r-----.   1 root ssh_keys    0 Jun 27 00:46 ssh_host_ed25519_key
-rw-r--r--.   1 root root        0 Jun 27 00:46 ssh_host_ed25519_key.pub
-rw-r-----.   1 root ssh_keys    0 Jun 27 00:46 ssh_host_rsa_key
-rw-r--r--.   1 root root        0 Jun 27 00:46 ssh_host_rsa_key.pub
The key files are zero length! I generated new key pairs and it fixed the problem:

ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key
ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key
ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key
#+END_EXAMPLE
** DONE Show error for ssh login
  CLOSED: [2017-09-04 Mon 10:41]
https://askubuntu.com/questions/586806/aws-ec2-set-up-key-and-non-key-authentication-at-same-time
no-port-forwarding,no-agent-forwarding,no-X11-forwarding,command="echo 'Please login as the user \"ubuntu\" rather than the user \"root\".';echo;sleep 10"
* DONE SCP from one external server to another                     :noexport:
  CLOSED: [2018-01-23 Tue 10:04]
https://unix.stackexchange.com/questions/184379/scp-from-one-server-to-another-server
https://superuser.com/questions/66949/scp-from-one-external-server-to-another
* TODO ssh-copy-id                                                 :noexport:
