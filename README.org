* SSH CheatSheet                                               :Tools:
:PROPERTIES:
:type:     ssh
:END:

Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-ssh, Category: [[https://cheatsheet.dennyzhang.com/category/tools][tools]]

#+BEGIN_HTML
<a href="https://github.com/dennyzhang/cheatsheet-ssh-A4"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
<div id="the whole thing" style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>

<br/><br/>
<a href="http://makeapullrequest.com" target="_blank" rel="nofollow"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg" alt="PRs Welcome"/></a>
#+END_HTML

File me [[https://github.com/DennyZhang/cheatsheet-ssh-A4/issues][Issues]] or star [[https://github.com/DennyZhang/cheatsheet-ssh-A4][this repo]].

See more CheatSheets from Denny: [[https://github.com/topics/denny-cheatsheets][#denny-cheatsheets]]
** scp
| Name                   | Summary                                                                     |
|------------------------+-----------------------------------------------------------------------------|
| Download remote folder | =scp -r -i <ssh-keyfile> ec2-user@<ssh-host>:/home/letsencrypt-20180825 ./= |
** Security
- Enable/Disable SSH Host Key Checking
#+BEGIN_EXAMPLE
# ~/.ssh/config
Host *
   StrictHostKeyChecking yes
   UserKnownHostsFile=/dev/null
#+END_EXAMPLE
- Add passphrase protection to your ssh deploy key

** More Resources
License: Code is licensed under [[https://www.dennyzhang.com/wp-content/mit_license.txt][MIT License]].
#+BEGIN_HTML
<a href="https://www.dennyzhang.com"><img align="right" width="201" height="268" src="https://raw.githubusercontent.com/USDevOps/mywechat-slack-group/master/images/denny_201706.png"></a>
<a href="https://www.dennyzhang.com"><img align="right" src="https://raw.githubusercontent.com/USDevOps/mywechat-slack-group/master/images/dns_small.png"></a>

<a href="https://www.linkedin.com/in/dennyzhang001"><img align="bottom" src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a>
<a href="https://github.com/dennyzhang"><img align="bottom"src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a>
<a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img align="bottom" src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a>
#+END_HTML
* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION:
#+KEYWORDS:
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:
#+LINK_HOME:
* TODO [#A] Blog: Advanced Usage Of SSH                            :noexport:
http://confluencecn.dennyzhang.com:18088/display/DEVOPS/Tips%3A+ssh+without+password
http://confluencecn.dennyzhang.com:18088/display/DEVOPS/Tips%3A+Use+ssh+tunnel+to+access+tcp+port
** ssh -v
** DONE [#A] ssh crediential: ssh-copy-id
  CLOSED: [2014-03-10 Mon 14:56]
exec ssh-agent bash && ssh-keygen
ssh-add
#+begin_example
oscadmin@janitor:~$ ssh-copy-id root@192.168.1.187
/usr/bin/ssh-copy-id: ERROR: No identities found
#+end_example
*** DONE authorized_keys
   CLOSED: [2014-10-07 Tue 16:11]
#+begin_example
generic03:~# ls -lth /root/.ssh/authorized_keys
-rw------- 1 root root 410 Oct  7 21:09 /root/.ssh/authorized_keys
generic03:~# cat /root/.ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDS0PzlAmou/sDSwCbaZq3QwYjn8V7GZNiZiB87FxlkI9RAIWx0czbHgDovqAgEJaOZjnnU2DOQpnbaLbHKAdNXVJeB7vwCoh/DYzxBFPX7Q7z0p95iyLbwCMGkJDPKcYGM1QP6O3kUNncWovmUnPGGmKbHagmwi/IXr8zO8yLixvFJLeyKopyHCQGb5h6pdbzsHCOdNIfOHbWey8WDlIsQzoqqsATJfsvE4Eb3nNzGkzZTGmc3IL13eCy13MedN3EUa6hdSh3tESRPCIcpGMtCnCPgUEfAHmLdb6pOHT2pAN4CbOZRsSjYc4nxWQamKF6n3ClJqHCTWDaGIPtcRNRt /var/lib/jenkins/.ssh/id_rsa
#+end_example
*** web page: Generating SSH Keys . GitHub Help
https://help.github.com/articles/generating-ssh-keys
**** webcontent                                                    :noexport:
#+begin_example
Location: https://help.github.com/articles/generating-ssh-keys
GitHub Help

  * Contact Support
  * Return to GitHub

SSH / Generating SSH Keys

[                    ] Search
Article last updated on 28-Feb-14

Generating SSH Keys

  * mac
  * windows
  * linux
  * all

Forget the terminal. Download our native app instead.

Download GitHub for Mac

Skip this guide. Download our native app instead.

Download GitHub for Windows

We strongly recommend using an SSH connection when interacting with GitHub. SSH keys are a way to
identify trusted computers, without involving passwords. The steps below will walk you through
generating an SSH key and then adding the public key to your GitHub account.

 Step 1: Check for SSH keys

First, we need to check for existing SSH keys on your computer. Open up your Terminalyour Terminal
your Git Bashthe command line and type:

cd ~/.ssh
ls -al
# Lists the files in your .ssh directory

Check the directory listing to see if you have files named either id_rsa.pub or id_dsa.pub. If you
don't have either of those files go to step 2. Otherwise, you can skip to step 3.

 Step 2: Generate a new SSH key

To generate a new SSH key, copy and paste the text below, making sure to substitute in your email.
The default settings are preferred, so when you're asked to "enter a file in which to save the
key,"" just press enter to continue.

ssh-keygen -t rsa -C "your_email@example.com"
# Creates a new ssh key, using the provided email as a label
# Generating public/private rsa key pair.
# Enter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]
ssh-add id_rsa

ssh-keygen -t rsa -C "your_email@example.com"
# Creates a new ssh key, using the provided email as a label
# Generating public/private rsa key pair.
# Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]
ssh-add id_rsa

ssh-keygen -t rsa -C "your_email@example.com"
# Creates a new ssh key, using the provided email as a label
# Generating public/private rsa key pair.
# Enter file in which to save the key (/home/you/.ssh/id_rsa):
ssh-add id_rsa

ssh-keygen -t rsa -C "your_email@example.com"
# Creates a new ssh key using the provided email
# Generating public/private rsa key pair.
# Enter file in which to save the key (/your_home_path/.ssh/id_rsa):

Next, you'll be asked to enter a passphrase:

# Enter passphrase (empty for no passphrase): [Type a passphrase]
# Enter same passphrase again: [Type passphrase again]

Which should give you something like this:

# Your identification has been saved in /Users/you/.ssh/id_rsa.
# Your public key has been saved in /Users/you/.ssh/id_rsa.pub.
# The key fingerprint is:
# 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com

# Your identification has been saved in /c/Users/you/.ssh/id_rsa.
# Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.
# The key fingerprint is:
# 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com

# Your identification has been saved in /home/you/.ssh/id_rsa.
# Your public key has been saved in /home/you/.ssh/id_rsa.pub.
# The key fingerprint is:
# 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com

# Your identification has been saved in /your_home_path/.ssh/id_rsa.
# Your public key has been saved in /your_home_path/.ssh/id_rsa.pub.
# The key fingerprint is:
# 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com

 Why do passphrases matter?

Passwords aren't very secure. If you use one that's easy to remember, it's easier to guess or
brute-force (try many options until one works). If you use one that's random, it's hard to
remember, and thus you're more inclined to write it down. Both of these are Very Bad Things™.

This is why you're using SSH keys. But, using a key without a passphrase is basically the same as
writing down that random password. Anyone who gains access to your computer has gained access to
every system you use that key with. This is also a Very Bad Thing™. The solution is to add a
passphrase to the SSH key, for an extra layer of security.

But I don't want to enter a long passphrase every time I use the key!

Neither do we! Thankfully, there's a nifty little tool called ssh-agent that can securely save your
passphrase so you don't have to re-enter it. If you're on OSX Leopard or later, your keys can be
saved in the system's keychain, which makes your life even easier. Unfortunately, it takes a little
work to get it up and running on Windows. Most linux installations will automatically start
ssh-agent for you when you log in. Depending on your OS, ssh-agent may be automatically run for you
when you log in.

For more information about SSH key passphrases, check out our help guide.

 Step 3: Add your SSH key to GitHub

Run the following code to copy the key to your clipboard.

pbcopy < ~/.ssh/id_rsa.pub
# Copies the contents of the id_rsa.pub file to your clipboard

Alternatively, using your favorite text editor, you can open the ~/.ssh/id_rsa.pub file and copy
the contents of the file manually

Warning: it's important to copy the key exactly without adding newlines or whitespace.

Run the following code to copy the key to your clipboard.

clip < ~/.ssh/id_rsa.pub
# Copies the contents of the id_rsa.pub file to your clipboard

Alternatively, using your favorite text editor, you can open the ~/.ssh/id_rsa.pub file and copy
the contents of the file manually

Run the following code to copy the key to your clipboard.

sudo apt-get install xclip
# Downloads and installs xclip. If you don't have `apt-get`, you might need to use another installer (like `yum`)

xclip -sel clip < ~/.ssh/id_rsa.pub
# Copies the contents of the id_rsa.pub file to your clipboard

Alternatively, using your favorite text editor, you can open the ~/.ssh/id_rsa.pub file and copy
the contents of the file manually

Open the ~/.ssh/id_rsa.pub file with a text editor. This is your SSH key. Select all and copy to
your clipboard.

Now that you have the key copied, it's time to add it into GitHub:

 1. Go to your Account Settings Account settings button
 2. Click SSH Keys in the left sidebar SSH Keys menu
 3. Click Add SSH key SSH Key button
 4. Paste your key into the "Key" field The key field
 5. Click Add key The Add key button
 6. Confirm the action by entering your GitHub password

 Step 4: Test everything out

To make sure everything is working, you'll now try SSHing to GitHub. When you do this, you will be
asked to authenticate this action using your password, which for the passphrase you created
earlier.

Open up your Terminalyour Terminalyour Git Bashthe command line and type:

ssh -T git@github.com
# Attempts to ssh to github

It's possible that you'll see this error message:

...
Agent admitted failure to sign using the key.
debug1: No more authentication methods to try.
Permission denied (publickey).

This is a known problem with certain Linux distributions. For a possible resolution, see our help
article.

You may see this warning:

# The authenticity of host 'github.com (207.97.227.239)' can't be established.
# RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
# Are you sure you want to continue connecting (yes/no)?

Don't worry! This is supposed to happen. Verify that the fingerprint in your terminal matches the
one we've provided up above, and then type "yes."

# Hi username! You've successfully authenticated, but GitHub does not
# provide shell access.

If that username is yours, you've successfully set up your SSH key! Don't worry about the "shell
access" thing, you don't want that anyway.

If you receive a message about "access denied," you can read these instructions for diagnosing the
issue.

---------------------------------------------------------------------------------------------------

  * contact a human

#

© year GitHub Inc. All rights reserved.

  * Terms of Service
  * Privacy
  * Security

#+end_example
*** how ssh-copy-id is done
** DONE [#A] mac ~/.ssh/config for StrictHostKeyChecking          :IMPORTANT:
  CLOSED: [2015-03-21 Sat 00:04]
http://blog.prezz.net/2013/06/disable-strict-ssh-host-checking-on-os-x.html
~/.ssh/config
#+BEGIN_EXAMPLE
Host sandbox
     HostName 192.168.50.10
     StrictHostKeyChecking no
     User root

Host 192.168.1.*
   StrictHostKeyChecking no
   UserKnownHostsFile=/dev/null
#+END_EXAMPLE
*** ~/.ssh/config
host all-in-one
     HostName 10.165.4.67
     Port 32882
     StrictHostKeyChecking no
     User root
     IdentityFile ~/.ssh/id_rsa
** [#A] Configure EC2 instance for ssh login                      :IMPORTANT:
sudo su -
sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config
sed -i 's/^#PermitRootLogin yes/PermitRootLogin yes/' /etc/ssh/sshd_config

sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
sed -i 's/^#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config

sed -i 's/no-port-forwarding,no-agent-forwarding.*//g'  ~/.ssh/authorized_keys

echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAwp69ZIA8Usz5EgSh5gBXKGFZBUawP8nDSgZVW6Vl/+NDhij5Eo5BePYvUaxg/5aFxrxROOyLGE9xhNBk7PP49Iz1pqO9T/QNSIiuuvQ/Xhpvb4OQfD5xr6l4t/9gLf+OYGvaFHf/xzMnc9cKzZ+azLlDHbeewu1GMI/XNFWo4VWAsH+6xM8VIpdJSaR7alJn/W6dmyRBbk0uS3Yut63jVFk4zalAzXquU0BX1ne+DLB/LW8ZanN5PWECabSi4dXYLfxC2rDhDcQdXU3MwV5b7TtR5rFoNS8IGcyHoeq5tasAtAAaD2sEzyJbllAfFsNyxNQ+Yh8935HcWqx2/T0r filebat.mark@gmail.com" >> ~/.ssh/authorized_keys

echo "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA2aRNnkifPeQIR0MtLyFZo2RSSbUVP/vrkGii3VkqNS8vcX88taO3Iv5Y0kD+4CE4qDJe75fxDXbu7IkSuqHrNb/jBrSZKY3KC8EO2lHYv3MMiwCk5rBMTRiZicOKEG2gQM/9fisXCTQamu48M75nyyU5LHptz5TnonLnum0e098JRbxL9UkdWBesEz/JO5TEhy1T0K2c6W6d+cFz0Bkz83gXLGK+KVWWHLJ7/YFd7gVj2ihM6RdSCWxrHeH9riQ8ALW1tkRF0jlsmxiAvvfaT21fmEltYAeZBUdfzgcseRSbM4b0vVp9BKatMoHEBk6pMZhp0r1A/rfH7tu4+yQfBw== root@osc-serv-01" >> ~/.ssh/authorized_keys

service ssh restart

Check with some other VM by username and pssword, not ssh keyfile
** DONE sshd allow SSH password authentication
  CLOSED: [2014-09-17 Wed 21:08]
http://askubuntu.com/questions/101670/how-can-i-allow-ssh-password-authentication-from-only-certain-ip-addresses
sudo su -
passwd

sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
# CentOS
nohup /etc/init.d/sshd restart &

# Ubuntu
nohup service ssh restart &
** DONE expect ssh在server上执行一个命令
   CLOSED: [2012-11-24 Sat 10:21]
#+begin_example exp
#!/usr/bin/expect
set timeout 20
set command "cat /etc/hosts"
set user "vagrant"
set password "vagrant"
set ip "192.168.50.10"
spawn ssh -o stricthostkeychecking=no $user@$ip "$command"
expect "*password:*"
send "$password\r"
expect eof;
#+end_example
** DONE [#A] ssh host key: change ~/.ssh/authorized_keys
  CLOSED: [2014-10-10 Fri 17:08]
echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAwp69ZIA8Usz5EgSh5gBXKGFZBUawP8nDSgZVW6Vl/+NDhij5Eo5BePYvUaxg/5aFxrxROOyLGE9xhNBk7PP49Iz1pqO9T/QNSIiuuvQ/Xhpvb4OQfD5xr6l4t/9gLf+OYGvaFHf/xzMnc9cKzZ+azLlDHbeewu1GMI/XNFWo4VWAsH+6xM8VIpdJSaR7alJn/W6dmyRBbk0uS3Yut63jVFk4zalAzXquU0BX1ne+DLB/LW8ZanN5PWECabSi4dXYLfxC2rDhDcQdXU3MwV5b7TtR5rFoNS8IGcyHoeq5tasAtAAaD2sEzyJbllAfFsNyxNQ+Yh8935HcWqx2/T0r filebat.mark@gmail.com" >>  ~/.ssh/authorized_keys
** #  --8<-------------------------- separator ------------------------>8--
** DONE [#A] ssh tunnel: ssh -N -p 22 -f root@qa1b -L 8002:localhost:9281 -n /bin/bash :IMPORTANT:
  CLOSED: [2014-07-18 Fri 14:06]
ssh -N -p 22 -f root@qa1b -L 8002:localhost:9281 -n /bin/bash1

local 8002 --> remote:9281, by server's ssh port of 22
** DONE [#B] windows ssh tunnel
  CLOSED: [2014-11-23 Sun 21:19]
http://howto.ccs.neu.edu/howto/windows/ssh-port-tunneling-with-putty/
*** web page: SSH Port Tunneling with Putty
http://howto.ccs.neu.edu/howto/windows/ssh-port-tunneling-with-putty/
**** webcontent                                                    :noexport:
#+begin_example
Location: http://howto.ccs.neu.edu/howto/windows/ssh-port-tunneling-with-putty/
  * Home
  * HOWTO
      + Accounts/Home Directories
          o How to sign up for a CCIS account
          o How do I log into/access/use my CCIS Account
          o How to Pick a "Good" Password
          o Forgot My Password
          o Home directory access on Linux and Windows
          o Online File Recovery (Snapshots)
          o CCIS Disk Quotas
          o NEU MyFiles WebDAV Access
      + Acquiring Software
      + Mail
          o Zimbra
          o CCIS Student Distribution Lists
          o Mail aliases and Mailman lists
          o Set an away message for your Zimbra mail account
          o Configuring Alpine (or Pine) to read your mail
      + Network
          o Private: Configuring Vista to connect to CCIS-XNet
          o Configuring Windows 7 to Connect to CCIS-Wireless
          o Remote Access
              # Remote Desktop
          o West Village H Sixpacks (Network Wall Ports)
      + Printing
          o Adding an IPP Printer to Mac OSX
          o Adding an IPP Printer to Windows 7
          o Private: Adding an IPP Printer to Windows XP
          o Adding an IPP Printer to a self-managed Linux machine
          o Cancelling your Print Job
          o CCIS Community Printers
          o Printing Duplex via LPR on CCIS Linux machines
          o Where Is My Print Job
      + Request Forms
          o CCIS Account Expiration
          o CCIS Masters Account Expiration
          o CCIS PHD Account Expiration
          o CCIS Student Account Expiration
          o Office Relocation Requests
          o Software Installation Request for Managed Machines
          o Sponsored Student Machine Requests
          o Wireless Guest Account Requests
      + UNIX/Linux
          o Learning Linux
          o Linux at CCIS
          o What is SSH
          o Automatic SSH Blocking
          o sudo (is something you don't do)
          o How do I change my shell
          o Firefox Troubleshooting under Linux
          o How to use CVS remotely at CCIS
      + Virtual Machines
          o Accessing Your Virtual Machine
          o Create a VM on VMware Server
          o Installing VMWare Tools on Ubuntu
          o VMware Fusion on myNEU
          o Requesting a VM
      + Web
          o ASP or CGI scripts
          o Course Materials
          o Form Mailer
          o Making Directories Browsable
          o Personal Web Pages
      + Windows
          o Accessing Local Files Using Remote Desktop
          o Information for New Staff Members
          o Mapping Windows Network Shares
          o Microsoft DreamSpark Program (formerly MSDNAA)
          o Remote Access to Windows Machines
          o SSH Port Tunneling with Putty
          o Using Software Center to Install Optional Packages
          o Windows Teaching Lab Guidelines
  * HOWTO for...
      + students
      + faculty
  * WHERETO
  * WHOTO
  * Make This Better
  * About

CCIS HOWTO

Technical Help Resources for the CCIS Community

SSH Port Tunneling with Putty

by Christopher Noyes on October 1, 2010

Last updated March 17, 2014

This howto page will provide instructions on how to reach services running inside the College
firewall from outside of the College's network by using the Putty SSH Client and SSH Port
Tunneling.

Requirements

Download Putty.exe from: http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe .

Port Tunneling

Launch Putty. Different categories will be listed on the left side, click on Connection > SSH >
Tunnels.

Under Add new forwarded port:, enter the following information:
Source port: [port on local machine]
Destination: [hostname of ccis machine]:[port on ccis machine]
Click Add.

It would look like this if I wanted to forward port 80 on the CCIS webserver to 8080 on my local
machine:
CCIS Webserver Tunneled to port 8080

Clicking Add will add it to the list of forwarded ports:
[putty11]

Connecting

After setting up the port tunnel, select Session from the category list on the left side.
Enter login.ccs.neu.edu in the Host Name (or IP Address) field and click the Open button at the
bottom right.
[putty2]

Select Yes if prompted with this window:

[putty3]

Use your CCIS username and password when prompted to login and your port tunnel will be setup.

[putty4]

Utilizing the Port Tunnel

Now that the port is tunneled, you can connect to it using localhost:[port forwarded] where [port
forwarded] is the local port you chose earlier.

In our previous example we forwarded port 80 on www.ccs.neu.edu to localhost:8080. We can now open
up a web browser and browse to localhost:8080 to see it:

[putty5]

MSSQL Over an SSH Tunnel

The steps are practically the same as tunneling any other service, except the port you will tunnel
is 1433. When connecting from MSSQL Management Studio, the connection host will be 127.0.0.1,[port
you forwarded] . Notice the comma between the ip and the port number, this is very important. The
following screens will show the proper setup:

[sql-1]

[sql-2]
[sql2008]

And there you have it, you should now be able to SSH Tunnel to any service inside CCIS's Firewall.

You must log in to post a comment.

WordPress Admin

#+end_example
** Why my ssh can't login?
** #  --8<-------------------------- separator ------------------------>8--
** web page: Using ssh-agent with ssh
#+BEGIN_EXAMPLE
http://mah.everybody.org/docs/ssh\\
#+END_EXAMPLE
*** wecontent                                                      :noexport:
#+begin_example
Location: http://mah.everybody.org/docs/ssh
top::docs

Using ssh-agent with ssh

by Mark A. Hershberger (weblog)

I went searching for a good, general page that would explain how to do passwordless logins using
ssh-agent and didn't find much at the time (now there is much more out there). So I wrote this
page.

Goals

Get a secure, encrypted connection to a remote machine without typing in a password.

Executive Summary

 1. Create a key pair on the local machine.
 2. Put the public key on any remote machines.
 3. Run ssh-agent to cache login credentials for the session. ssh-agent requires the user to
    "unlock" the private key first.

Related Pages

 1. Alternate agent startup scripts -- Working with KDE, Cygwin, or csh-derived shell? Some scripts
    to help
 2. Troubleshooting -- Can't connect? Here's some ideas to help you troubleshoot the problem.
 3. Automatic ssh -- Daemons, long-lived processes and ssh.

Methods

Use OpenSSH to handle the authentication.

For Windows users, the methods I describe here will work with the OpenSSH that is part of the
CygWin toolset.

Anyway, here is how to set up a pair of keys for passwordless authentication via ssh-agent.

 1. Generate the keys. Do this on the host that you want to connect from.

    Note: Older versions of OpenSSH (1.2.xx) and, perhaps, commercial SSH may require that you have
    to use RSA keys. In this case substitute "RSA" for "DSA" after "-t" and "identity" for
    "id_dsa". Continue to substitute "RSA" where you see "DSA" throughout. Everything else should
    be the same.

    Also Note: On Windows machines, the command prompt doesn't understand the ~ which on Unix
    machines means "the home directory". Instead use %HOME% wherever you see the tilde.

              $ ssh-keygen -t dsa -f ~/.ssh/id_dsa -C "you@example.com"
              Generating DSA keys:  Key generation complete.
              Enter passphrase (empty for no passphrase): USE-A-PASSPHRASE
              Enter same passphrase again: USE-A-PASSPHRASE
              Your identification has been saved in ~/.ssh/id_dsa
              Your public key is:
              1024 35 [really long string] you@example.com
              Your public key has been saved in ~/.ssh/id_dsa.pub
              $

 2. To use the key on other hosts you will be connecting from, copy the ~/.ssh/id_dsa key to the
    other hosts:

              $ scp ~/.ssh/id_dsa you@another-box:.ssh/

    However, it is probably better just to generate new keys for those hosts.
 3. Make sure the public key is in the ~/.ssh/authorized_keys file on the hosts you wish to connect
    to. You can use a password authenticated connection to do this:

              $ cat ~/.ssh/id_dsa.pub | ssh you@other-host 'cat - >> ~/.ssh/authorized_keys'
              you@other-host's password:
              $

    Note: If an older version of ssh is running on the remote host, you may have to use the ~/.ssh/
    authorized_keys2 file.

    Note: If your local machine is Windows, try

              C:\> type %HOME%/.ssh/id_dsa.pub | ssh you@other-host "cat - >> ~/.ssh/authorized_keys"
              you@other-host's password:
              C:\>

    Also note: If the remote server is Windows, you will probably want to use type instead of cat
    for the second half of your command.

 4. Verify that DSA authentication works:

              $ ssh you@example.com
              Enter passphrase for DSA key 'you@example.com': ^D
              $

    If you don't get the prompt for your DSA key, then something has gone wrong. (One thing to
    check: verify that sshd_config on the server has been configured to do DSA authentication. Look
    for DSAAuthentication yes or get your system administrator to add it if necessary.)

Now that that works, you will want the passwordless part, right?

 1. Start up ssh-agent. You can have it create a subprocess which inherits the SSH_AUTH_SOCK
    environment variable, or you can run it as a daemon.

    Since I run gdm on Debian, ssh-agent is started automatically when I log in. If you don't have
    this benefit, you can get it by putting the following line at the end of your .xsession file
    (You can substitute your window manager for gnome-session if that is what you use):

              ssh-agent gnome-session

    Which basically means that ssh-agent starts up, creates a socket, sets up a couple of
    environment variables and then starts up gnome-session. That way all of the programs run in
    Gnome have access to the agent.

    The above solution is the best one if you are logging in via GDM or another graphical login
    manager under *nix. However, if you login at the console, or want to use ssh-agent under
    Cygwin, you'll have to use one of the following solutions.

    If you want to, say, put it in your .profile, then you might try the following setup. In my
    .bash_profile, I have

              SSHAGENT=/usr/bin/ssh-agent
              SSHAGENTARGS="-s"
              if [ -z "$SSH_AUTH_SOCK" -a -x "$SSHAGENT" ]; then
                    eval `$SSHAGENT $SSHAGENTARGS`
                trap "kill $SSH_AGENT_PID" 0
              fi

    (If you use csh or tcsh, see this note for the equivilent piece of code for your .login shell.)

    This brings SSH_AUTH_SOCK and SSH_AGENT_PID as environment variables into the current shell.

    The trap should kill off any remaining ssh-agent process. If it doesn't, you won't want the
    ssh-agent daemons sitting around, so you might want the following in your .logout:

              kill $SSH_AGENT_PID

    An alternative, provided by John Buttery, is

                if [ ${SSH_AGENT_PID+1} == 1 ]; then
                  ssh-add -D
                  ssh-agent -k > /dev/null 2>&1
                  unset SSH_AGENT_PID
              unset SSH_AUTH_SOCK
            fi

    Finally, this solution from Joseph M. Reagle by way of Daniel Starin:

        SSH_ENV="$HOME/.ssh/environment"

        function start_agent {
             echo "Initialising new SSH agent..."
             /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
             echo succeeded
             chmod 600 "${SSH_ENV}"
             . "${SSH_ENV}" > /dev/null
             /usr/bin/ssh-add;
        }

        # Source SSH settings, if applicable

        if [ -f "${SSH_ENV}" ]; then
             . "${SSH_ENV}" > /dev/null
             #ps ${SSH_AGENT_PID} doesn't work under cywgin
             ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
                 start_agent;
             }
        else
             start_agent;
        fi

        This last version is especially nice since it will see if you've already started ssh-agent
        and, if it can't find it, will start it up and store the settings so that they'll be usable
        the next time you start up a shell.

        (Update 25 Sep 2007: Adam Piper pointed out that quoting anything that uses $HOME is
        necessary on Cygwin.)

 2. Finally, time to type a password. The last one of this session, maybe.

              $ ssh-add ~/.ssh/id_dsa
              Need passphrase for /home/mah/.ssh/id_dsa (you@example.com).
              Enter passphrase:
              $

 3. Now, you should test it:

              $ ssh you@example.com
              Last login: Tue Apr 25 13:40:21 1492 from europe.com
              Sun Microsystems Inc.   SunOS 5.7       Generic October 1998
              No mail.
              [you@example.com]$

    Jubilation! It worked! Go forth and conquer! (If it doesn't work, try chmod -R go-rw ~/.ssh on
    the server and try again.)

Ok, so, did it work or no? Let me know.

If you want to use this setup for editing remote files in emacs under Windows, check out my
Tramp-on-NT page.

If you want to understand a little bit more about how all this works, read An Illustrated Guide to
SSH Agent Forwarding.

Acknowlegements

27 Aug 2002: David Previti offered the working Windows-client to Windows-server key copy command as
well as other Window-isms.

9 Aug 2002: Lloyd Smith suggested verifying that sshd_config is set up to do DSA authentication if
it fails initially.

3 Jul 2002: David Newcomb offered the trick of putting trap 0 in the login/profile script.

18 May 2002: A more complete logout script from John Buttery. Also added tips on using RSA rather
than DSA keys.

---------------------------------------------------------------------------------------------------

mah@everybody.org                                                               Valid CSS Valid XHT
Last Modified: Tue Sep 25 09:38:05 2005
#+end_example
** DONE web page: How to safely start the ssh-agent from .bashrc  :IMPORTANT:
#+BEGIN_EXAMPLE
  CLOSED: [2012-01-04 Wed 11:46]
 http://drupal.star.bnl.gov/STAR/blog-entry/jeromel/2009/feb/06/how-safely-start-ssh-agent-bashrc\\
#+END_EXAMPLE
*** wecontent                                                      :noexport:
#+begin_example
How to safely start the ssh-agent from .bashrc
Submitted by jeromel on Fri, 2009-02-06 14:21

Here is a quick script addition to our .bashrc file which will start a ssh-agent once and load the proper environment variables for the other terminal you will sub-sequentially open.

------ cut here ------->

test=`/bin/ps -ef | /bin/grep ssh-agent | /bin/grep -v grep  | /usr/bin/awk '{print $2}' | xargs`

if [ "$test" = "" ]; then
   # there is no agent running
   if [ -e "$HOME/agent.sh" ]; then
      # remove the old file
      /bin/rm -f $HOME/agent.sh
   fi;
   # start a new agent
   /usr/bin/ssh-agent | /usr/bin/grep -v echo >&$HOME/agent.sh
fi;

test -e $HOME/agent.sh && source $HOME/agent.sh

alias kagent="kill -9 $SSH_AGENT_PID"

<------ cut here -------
Tips

    * Most trivial remark: the above is a SH script and it sources the agent.sh - please verify that ssh-agent output sh commands (and not csh commands). If your system global default shell is bash or sh, this will be true.

    * If you use this script, please use

      % ssh-add -L

      to check if keys are already upload or load them using the same command. ssh-add cannot be automated in .bashrc since it will prompt for your passphrase.
    * Note that the file agent.sh resides in your home directory. If on any terminal, ssh-add tells you

          Could not open a connection to your authenticated agent

      then source agent.sh and try again

    * Starting an agent automatically in this manner implies that ANYONE having access to your machine, laptop could access your remote accounts without having to type a password. You MUST understand this includes automated command executed on your behalf. To minimize this risk, consider the following:
          o Be careful of the use of an agent on a node which is NOT a personal laptop or computer. If multiple people have access to the machine, consider it a NO start (the ps command in our example would not work and you will need to grep $USER but more importantly, it is NOT a good idea to start agent  automatically like this).
          o If you do start an agent, upload your keys when needed. You may destroy your keys by using the

            % ssh-add -D

            command. You may also destroy the agent (which will have the same effect).

    * The command kagent has been defined above to kill the first agent detached via this method.

    * To make sure -A option is implicit while using ssh (and/or -X) consult Caveats, issues, special cases and possible problems for further information on tweaking your client side $HOME/.ssh/config .



 PLease, le me know if this script causes problems and your suggestion to improve.
#+end_example
** DONE ssh-add fail: Could not open a connection to your authentication agent.
  CLOSED: [2012-01-04 Wed 11:26]
http://forum.slicehost.com/comments.php?DiscussionID=3385\\

http://funkaoshi.com/blog/could-not-open-a-connection-to-your-authentication-agent\\

exec ssh-agent bash

ssh-agent

ssh-add
*** console shot:                                                  :noexport:
#+begin_example
bash-3.2$ ssh-add /var/lib/hudson/.ssh/id_rsa
Could not open a connection to your authentication agent.
#+end_example
** DONE disable SSH host key checking: ssh -o StrictHostKeyChecking=no root@192.168.75.109 "date"
    CLOSED: [2012-01-16 Mon 15:33]
ssh -o StrictHostKeyChecking=no root@192.168.75.109 "date"

http://bec-systems.com/site/220/how-to-disable-ssh-host-key-checking\\

http://www.symantec.com/connect/articles/ssh-host-key-protection\\
** DONE 多个中文版远程管理工具爆出被捆绑后门
   CLOSED: [2012-02-01 Wed 17:05]
*** mail:                                                          :noexport:
#+begin_example
From: wzzhang <pterr@126.com>
Subject: 转:多个中文版远程管理工具爆出被捆绑后门
To: markfilebat126 <denny.zhang001@gmail.com>
Date: Wed, 01 Feb 2012 15:16:13 +0800
X-Mailer: Coremail Webmail Server Version SP_ntes V3.5 build 111202(16086.4213.4207) Copyright (c) 2002-2012 www.mailtech.cn 126com

 公司信息安全部门发的

---------------------------------------------------------------------------------
    近日多个中文版远程管理工具爆出被捆绑后门

 影响版本:putty`WinSCP`SSH Secure等多种中文版

 说明:根据目前发现的后门代码,仅涉及到使用密码登陆,不影响key登陆用户.

 服务器中招的症状可能包括:
 1`进程 /etc/ 或 /lib/ 下的 .osyslog 或 .fsyslog 吃CPU超过100~1000%（O与f可能为随机）
 2`有网络连接往 98.126.55.226:82 大概为主控
 3`机器疯狂外发数据
 4`/var/log 被删除
 5`/etc/init.d/sshd 或 /etc/init.d/sendmail 被修改

 已知可能存在问题的站点:
 　　http://www.putty.org.cn
 　　http://putty.ws
 　　http://www.winscp.cc
 　　http://www.sshsecure.com

 临时解决方案:
 1.修改SSH端口
 2.禁止SSH密码登陆
 3.删除可疑的汉化版工具,从官方下载各类工具软件
 4.防火墙限制登陆IP

 相关详情可参考:
 http://bbs.duba.net/thread-22623363-1-1.html\\
#+end_example
** OpenSSH基于安全的理由,如果用户连线到SSH Server后闲置一段时间,SSH Server会在超过特定时间后自动终止SSH连线.
http://www.ha97.com/4070.html\\
#+begin_example
（总结）Linux下设置SSH Server保持长时间连接
发表于: Linux, 个人日记 | 作者: 谋万世全局者
标签: Linux,server,SSH,保持连接,总结,设置,长时间

OpenSSH基于安全的理由,如果用户连线到SSH Server后闲置一段时间,SSH Server会在超过特定时间后自动终止SSH连线.本人习惯长时间连接,需要做如下修改:

1`打开ssh配置文件:# vim /etc/ssh/sshd_config
加入如下两个参数保存就可以:

    TCPKeepAlive yes
    ClientAliveCountMax 360

注:前一个参数表示要保持TCP连接,后一个参数表示客户端的SSH连线闲置多长时间后自动终止连线的数值,单位为分钟.

2`重启sshd生效:

    /etc/init.d/sshd restart

注:此法适用于所有Linux发行版的OpenSSH.
#+end_example
** web page: Now Code » 取消SSH登录过程中延时方法
http://now-code.com/archives/330
*** webcontent                                                     :noexport:
#+begin_example
Location: http://now-code.com/archives/330
Now Code

Enjoy the now-code world

  * Home
  * About
  * Contact
  * Search
  *

[                        ]  submit
Home > Linux > 取消SSH登录过程中延时方法

取消SSH登录过程中延时方法

May 31st, 2011 wangjingfei Leave a comment Go to comments

在登录ssh服务器的时候,需要等待10秒钟左右才会提示输入密码.这样在服务器很多的情况下,会让人抓狂.以
下就是取消这个延时的方法.

需要做的有两步:

1. 设置本地ssh客户端
修改/etc/ssh/ssh_conf文件（注意:不是sshd_conf文件,因为我们要修改客户端设置）.
找到以下内容:

GSSAPIAuthentication yes

修改为:

GSSAPIAuthentication no

这样,登录的时候就不会执行GSSAPI验证了,一般情况下登录延时就会消除.

但是,在有的时候,还会有登录延时,这就需要另外的设置了.

2. 设置服务器sshd服务端
SSHD缺省配置下,在接受每一个连接时都会向DNS Server去请求一个逆向解析请求来解析客户端IP,如此就会非
常影响登录速度.取消DNS逆向解析就可以了.修改sshd服务器端配置文件/etc/ssh/sshd_conf,在文件末尾添加
（或修改）如下内容:

UseDNS no

来自: Now Code, 转载请注明出处: http://now-code.com/archives/330

Post Footer automatically generated by wp-posturl plugin for wordpress.

Categories: Linux Tags: ssh, sshd
Comments (0) Trackbacks (1) Leave a comment Trackback

 1. No comments yet.

 1. May 31st, 2011 at 14:20 | #1
    取消SSH登录过程中延时方法 » Now Code

[                        ] Name (required)
[                        ] E-Mail (will not be published) (required)
[                        ] Website
[                                                  ]
[                                                  ]
[                                                  ]
[                                                  ]
[                                                  ]
[                                                  ]
[                                                  ]
[                                                  ]
Subscribe to comments feed
 Submit Comment

编程之美:快速找出机器故障网址迁移:使用301 redirects（Nginx和PHP方法）
RSS

  * Google
  * Youdao
  * Xian Guo
  * Zhua Xia
  * My Yahoo!
  * newsgator
  * Bloglines
  * iNezha

Recent

  * Use of datetime format
  * Tomcat 7 listen on port 80 – Linux Debian
  * Install oracle-java7-jdk in Ubuntu 12.04 (precise)
  * Synchronization between two different MySQL servers
  * Linux中xargs命令的用法

Tags

10.04 Algorithm Apache Boost C++ CentOS cipher CMake Compile cron crontab Datetime deb Debian gdb
GoDaddy IPv6 KVM libpcap Linux MAC mail MySQL Nginx NTP OpenVPN redmine rpm shell Socket ssh Ubuntu
Visual Studio windows WordPress 内核基础排序时钟算法编程之美编译网络安装脚本虚拟机

Views

  * CMake快速入门教程:实战 - 3,863 views
  * 在Visual Studio下编译libjingle-0.5.2 - 1,425 views
  * Cipher答案（更新至20关） - 1,313 views
  * CentOS中编译内核步骤及说明 - 988 views
  * Ubuntu配置IPv6环境下的VPN - 986 views
  * CentOS-5配置kvm的TAP网络 - 918 views
  * CentOS修改主机名 - 803 views
  * linux下使用C++获取本地网卡的IP和MAC - 747 views
  * 使用KVM虚拟机调试内核 - 735 views
  * 关于NTP时钟自动更新（更新间隔等） - 706 views

Contact

Contact me!

Categories

  * Algorithm
  * C++
  * Email
  * Java
  * Linux
  * Office技巧
  * windows
  * 个人主机
  * 互联网
  * 未分类
  * 面试题

好友链接

  * 四号程序员
  * 易轶师姐律师咨询
  * 阳光的博客

Locations of visitors to this page

membership

  * Log in

Top WordPress
Copyright © 2011-2012 Now Code
Theme by NeoEase. Valid XHTML 1.1 and CSS 3.

#+end_example
** DONE [#A] Fail to ssh CentOS vm: 将/etc/ssh/sshd_config中设置好"PermitRootLogin yes"
  CLOSED: [2014-02-25 Tue 11:39]
#+begin_example
[root@osc-serv-01 denny(keystone_admin)]# ssh -v root@192.168.1.187 date
ssh -v root@192.168.1.187 date
OpenSSH_5.3p1, OpenSSL 1.0.1e-fips 11 Feb 2013
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to 192.168.1.187 [192.168.1.187] port 22.
debug1: Connection established.
debug1: permanently_set_uid: 0/0
debug1: identity file /root/.ssh/identity type -1
debug1: identity file /root/.ssh/identity-cert type -1
debug1: identity file /root/.ssh/id_rsa type 1
debug1: identity file /root/.ssh/id_rsa-cert type -1
debug1: identity file /root/.ssh/id_dsa type -1
debug1: identity file /root/.ssh/id_dsa-cert type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_5.3
debug1: match: OpenSSH_5.3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_5.3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server->client aes128-ctr hmac-md5 none
debug1: kex: client->server aes128-ctr hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024<1024<8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host '192.168.1.187' is known and matches the RSA host key.
debug1: Found key in /root/.ssh/known_hosts:23
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,gssapi-keyex,gssapi-with-mic,password
debug1: Next authentication method: gssapi-keyex
debug1: No valid Key exchange context
debug1: Next authentication method: gssapi-with-mic
debug1: Unspecified GSS failure.  Minor code may provide more information
Cannot determine realm for numeric host address

debug1: Unspecified GSS failure.  Minor code may provide more information
Cannot determine realm for numeric host address

debug1: Unspecified GSS failure.  Minor code may provide more information


debug1: Unspecified GSS failure.  Minor code may provide more information
Cannot determine realm for numeric host address

debug1: Next authentication method: publickey
debug1: Trying private key: /root/.ssh/identity
debug1: Offering public key: /root/.ssh/id_rsa
debug1: Authentications that can continue: publickey,gssapi-keyex,gssapi-with-mic,password
debug1: Trying private key: /root/.ssh/id_dsa
debug1: Next authentication method: password
root@192.168.1.187's password:
debug1: Authentications that can continue: publickey,gssapi-keyex,gssapi-with-mic,password
Permission denied, please try again.
root@192.168.1.187's password:
debug1: Authentications that can continue: publickey,gssapi-keyex,gssapi-with-mic,password
Permission denied, please try again.
root@192.168.1.187's password:
debug1: Authentications that can continue: publickey,gssapi-keyex,gssapi-with-mic,password
debug1: No more authentication methods to try.
Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).
#+end_example
** web page: HowTos/Network/SecuringSSH - CentOS Wiki
http://wiki.centos.org/HowTos/Network/SecuringSSH
*** webcontent                                                     :noexport:
#+begin_example
Location: http://wiki.centos.org/HowTos/Network/SecuringSSH
CentOS

  * Login

  * FrontPage
  * Help
  * Tips and Tricks
  * How To
  * FAQs
  * Events
  * Contribute
  * Newsletter
  * Changelog
  * SecuringSSH

---------------------------------------------------------------------------------------------------
Search: [                    ]  Search Full Text   Search Titles
  * HowTos
  * Network
  * SecuringSSH

Securing OpenSSH

Contents

 1. Use Strong Passwords/Usernames
 2. Disable Root Logins
 3. Limit User Logins
 4. Disable Protocol 1
 5. Use a Non-Standard Port
 6. Filter SSH at the Firewall
 7. Use Public/Private Keys for Authentication
 8. Frequently Asked Question (FAQ)
 9. Links

OpenSSH (or Secure SHell) has become a de facto standard for remote access replacing the telnet
protocol. SSH has made protocols such as telnet redundant due, in most part, to the fact that the
connection is encrypted and passwords are no longer sent in plain text for all to see.

However, a default installation of ssh isn't perfect, and when running an ssh server there are a
few simple steps that can dramatically harden an installation.

1. Use Strong Passwords/Usernames

One of the first things you'll notice if you have ssh running and exposed to the outside world is
that you'll probably log attempts by hackers to guess your username/password. Typically a hacker
will scan for port 22 (the default port on which ssh listens) to find machines with ssh running,
and then attempt a brute-force attack against it. With strong passwords in place, hopefully any
attack will be logged and noticed before it can succeed.

Hopefully you already use strong passwords, but if you are not then try to choose passwords that
contains:

  * Minimum of 8 characters
  * Mix of upper and lower case letters
  * Mix of letters and numbers
  * Non alphanumeric characters (e.g. special characters such as ! " £ $ % ^ etc)

The benefits of strong passwords aren't specific to ssh, but have an impact on all aspects of
systems security. Further information on passwords can be found in the CentOS documentation:

http://www.centos.org/docs/4/html/rhel-sg-en-4/s1-wstation-pass.html

If you absolutely can't prevent your users choosing weak passwords, then consider using randomly
generated or difficult to guess usernames for your user accounts. If the bad guys can't guess the
username then they can't brute force the password. However, this is still security through
obscurity and be aware of information leakage of usernames from things such as email sent from user
accounts.

2. Disable Root Logins

SSH server settings are stored in the /etc/ssh/sshd_config file. To disable root logins, make sure
you have the following entry:

# Prevent root logins:
PermitRootLogin no

and restart the sshd service:

service sshd restart

If you need root access, login as a normal user and use the su command.

3. Limit User Logins

SSH logins can be limited to only certain users who need remote access. If you have many user
accounts on the system then it makes sense to limit remote access to only those that really need it
thus limiting the impact of a casual user having a weak password. Add an AllowUsers line followed
by a space separated list of usernames to /etc/ssh/sshd_config For example:

AllowUsers alice bob

and restart the sshd service.

4. Disable Protocol 1

SSH has two protocols it may use, protocol 1 and protocol 2. The older protocol 1 is less secure
and should be disabled unless you know that you specifically require it. Look for the following
line in the /etc/ssh/sshd_config file, uncomment it and amend as shown:

# Protocol 2,1
Protocol 2

and restart the sshd service.

5. Use a Non-Standard Port

By default, ssh listens for incoming connections on port 22. For a hacker to determine ssh is
running on your machine, he'll most likely scan port 22 to determine this. An effective method is
to run ssh on a non-standard port. Any unused port will do, although one above 1024 is preferable.
Many people choose 2222 as an alternative port (as it's easy to remember), just as 8080 is often
known as the alternative HTTP port. For this very reason, it's probably not the best choice, as any
hacker scanning port 22 will likely also be scanning port 2222 just for good measure. It's better
to pick some random high port that's not used for any known services. To make the change, add a
line like this to your /etc/ssh/sshd_config file:

# Run ssh on a non-standard port:
Port 2345  #Change me

and restart the sshd service. Don't forget to then make any necessary changes to port forwarding in
your router and any applicable firewall rules.

On CentOS 6 and above you should also update selinux, labeling the chosen port correctly, otherwise
sshd will be prevented from accessing it. For example:

$ semanage port -a -t ssh_port_t -p tcp 2345 #Change me

Because ssh is no longer listening for connections on the standard port, you will need to tell your
client what port to connect on. Using the ssh client from the command line, we may specify the port
using the -p switch:

$ ssh -p 2345 myserver

or if you are using the fish protocol in konqueror, for example:

fish://myserver:2345/remote/dir

If you are thinking that this sounds like a pain having to specify the port each time you connect,
simply add an entry specifying the port in your local ~/.ssh/config file:

 # Client ~/.ssh/config
Host myserver
HostName 72.232.194.162
        User bob
        Port 2345

And the file: ~/.ssh/config must have the following permissions:

$ chmod 600 ~/.ssh/config

6. Filter SSH at the Firewall

If you only need remote access from one IP address (say from work to your home server), then
consider filtering connections at your firewall by either adding a firewall rule on your router or
in iptables to limit access on port 22 to only that specific IP address. For example, in iptables
this could be achieved with the following type of rule:

iptables -A INPUT -p tcp -s 72.232.194.162 --dport 22 -j ACCEPT

SSH also natively supports TCP wrappers and access to the ssh service may be similarly controlled
using hosts.allow and hosts.deny.

If you are unable to limit source IP addresses, and must open the ssh port globally, then iptables
can still help prevent brute-force attacks by logging and blocking repeated attempts to login from
the same IP address. For example,

iptables -A INPUT -p tcp --dport 22 -m state --state NEW -m recent --set --name ssh --rsource
iptables -A INPUT -p tcp --dport 22 -m state --state NEW -m recent ! --rcheck --seconds 60 --hitcount 4 --name ssh --rsource -j ACCEPT

The first rule records the IP address of each new attempt to access port 22 using the recent
module. The second rule checks to see if that IP address has attempted to connect 4 or more times
within the last 60 seconds, and if not then the packet is accepted. Note this rule would require a
default policy of DROP on the input chain.

Don't forget to change the port as appropriate if you are running ssh on a non-standard port. Where
possible, filtering at the firewall is an extremely effective method of securing access to an ssh
server.

7. Use Public/Private Keys for Authentication

Using encrypted keys for authentication offers two main benefits. Firstly, it is convenient as you
no longer need to enter a password (unless you encrypt your keys with password protection) if you
use public/private keys. Secondly, once public/private key pair authentication has been set up on
the server, you can disable password authentication completely meaning that without an authorized
key you can't gain access - so no more password cracking attempts.

It's a relatively simple process to create a public/private key pair and install them for use on
your ssh server.

First, create a public/private key pair on the client that you will use to connect to the server
(you will need to do this from each client machine from which you connect):

$ ssh-keygen -t rsa

This will create two files in your (hidden) ~/.ssh directory called: id_rsa and id_rsa.pub The
first: id_rsa is your private key and the other: id_rsa.pub is your public key.

If you don't want to still be asked for a passphrase (which is basically a password to unlock a
given public key) each time you connect, just press enter when asked for a passphrase when creating
the key pair. It is up to you to decide whether or not you should add the passphrase protective
encryption to your key when you create it. If you don't passphrase protect your key, then anyone
gaining access to your local machine will automatically have ssh access to the remote server. Also,
root on the local machine has access to your keys although one assumes that if you can't trust root
(or root is compromised) then you're in real trouble. Encrypting the key adds additional security
at the expense of eliminating the need for entering a password for the ssh server only to be
replaced with entering a passphrase for the use of the key. This may be further simplified by the
use of the ssh_agent program

Now set permissions on your private key:

$ chmod 700 ~/.ssh
$ chmod 600 ~/.ssh/id_rsa

Copy the public key (id_rsa.pub) to the server and install it to the authorized_keys list:

$ cat id_rsa.pub >> ~/.ssh/authorized_keys

Note: once you've imported the public key, you can delete it from the server.

and finally set file permissions on the server:

$ chmod 700 ~/.ssh
$ chmod 600 ~/.ssh/authorized_keys

The above permissions are required if StrictModes is set to yes in /etc/ssh/sshd_config (the
default).

Ensure the correct SELinux contexts are set:

$ restorecon -Rv ~/.ssh

Now when you login to the server you won't be prompted for a password (unless you entered a
passphrase when you created your key pair). By default, ssh will first try to authenticate using
keys. If no keys are found or authentication fails, then ssh will fall back to conventional
password authentication.

Once you've checked you can successfully login to the server using your public/private key pair,
you can disable password authentication completely by adding the following setting to your /etc/ssh
/sshd_config file:

# Disable password authentication forcing use of keys
PasswordAuthentication no

8. Frequently Asked Question (FAQ)

Q: CentOS uses version X of OpenSSH and the latest version is version Y. Version X contained a
serious security flaw, should I upgrade?

A: No. The Upstream Vendor has a policy of backporting security patches from the latest releases
into the current distribution version. As long as you have the latest updates applied for your
CentOS distribution you are fully patched. See here for further details of backporting security
patches:

http://www.redhat.com/advice/speaks_backport.html

9. Links

http://www.centos.org/docs/5/html/Deployment_Guide-en-US/ch-openssh.html

http://www.dragonresearchgroup.org/insight/sshpwauth-tac.html

...

HowTos/Network/SecuringSSH (last edited 2013-12-28 20:04:26 by NedSlider)

---------------------------------------------------------------------------------------------------

  * FrontPage
  * Help
  * Tips and Tricks
  * How To
  * FAQs
  * Events
  * Contribute
  * Newsletter
  * Changelog
  * SecuringSSH

Creative Commons License
This wiki is licensed under a Creative Commons Attribution-Share Alike 3.0 Unported License.

#+end_example
** SSH login authentication method: publickey,gssapi-keyex,gssapi-with-mic,password
** web page: Enable SSH Keep Alive | FettesPS
http://www.fettesps.com/enable-ssh-keep-alive/
*** webcontent                                                     :noexport:
#+begin_example
Location: http://www.fettesps.com/enable-ssh-keep-alive/
FettesPS

Fettes Programming Solutions

  * Home
  * About
  * Portfolio
  * Projects

RSS

Enable SSH Keep Alive

Posted in Linux
11
Jun

One of the first things I do every time I set up a server is increase the timeout on the SSH
timeout to a much higher value. Nothing more annoying than when you go to refill your drink only to
return to a dead session. Increasing the timeout is quite simple:

On the server execute the following commands:

sudo pico /etc/ssh/sshd_config

Look for TCPKeepAlive and make sure it is set to yes and add the following lines after it:

ClientAliveInterval 30
ClientAliveCountMax 1000

This will execute a "keep alive" command every 30 seconds and continue to do so 1000 times. You can
tweak these settings to suit your needs of course. You will also need to restart your SSH server
using the following command:

# /etc/init.d/sshd restart

For more information on configuring SSH, just type man ssh.

Tags: clientaliveinterval, keepalive, ssh, sshd, sshd_config, tcpkeepalive

                                            * Del.icio.us
                                            * StumbleUpon
                                              * Reddit
                                              * Twitter
                                                * RSS
                                                 *

20 Responses to "Enable SSH Keep Alive"

 1. [ad] acanac says:
    June 12, 2009 at 4:22 pm

    Very handy :D

 2. [ad] kousi says:
    June 12, 2009 at 5:28 pm

    This may be common knowledge but I really do not know:

    When I logon remotely (outside my LAN) my connection drops after idle for a bit, whereas when
    I'm at home it stays on indefinitely. I already set this and am testing it, but is this the
    case for everyone else?

 3. [ad] fettesps says:
    June 12, 2009 at 5:32 pm

    pico is a basic text editor for Linux. You can of course use whichever you prefer, nano, vi,
    emacs, etc

 4. [ad] mogmog says:
    June 12, 2009 at 5:48 pm

    I don't understand why it's a server option though – as this only happens at your work the best
    option would be to enable this on your work computer.

    I guess it doesn't hurt to enable this though.

 5. [ad] onmach says:
    June 12, 2009 at 5:57 pm

    There is a client option. You can put it in your .ssh/config file ie:

    Host server1 server2
    ServerAliveInterval 300

    Or just put it in /etc/ssh/ssh_config.

 6. [ad] geekamongus says:
    June 12, 2009 at 6:03 pm

    It could be the SSH client you are using - perhaps they have different settings at home vs. at
    work? Some support keepalive, while others do not.

 7. [ad] bsdboy says:
    June 12, 2009 at 6:06 pm

    You're probably going through a firewall that has it's translations set to dismantle idle
    connections after this given amount of time.

 8. [ad] joelthelion says:
    June 12, 2009 at 6:07 pm

    How does increasing the ssh keep alive time decrease security? I'm genuinely curious here.

 9. [ad] kousi says:
    June 12, 2009 at 6:17 pm

    Yeah it must be, I use openwrt, which, when I SSH directly to that it stays connected. I was
    beginning to wonder if SSHD was doing connection closing based on remote IP. I'll have to look
    into the openwrt firewall settings sometime.

10. [ad] bsdboy says:
    June 12, 2009 at 6:29 pm

    To make it easier to track down, use time when you ssh and immediately go idle. `time ssh
    my.com`

    When it disconnects it'll let you exactly how long it was, if it's 20 minutes you will be
    looking for a 20 minute timer.

11. [ad] kousi says:
    June 12, 2009 at 6:38 pm

    Thanks for the great tip.

12. [ad] speaker219 says:
    June 12, 2009 at 6:56 pm

    pico = nano, yes?

13. [ad] fettesps says:
    June 12, 2009 at 7:21 pm

    Not quite, nano is build to resemble pico and was supposed to replace it. But it has some weird
    quirks I've never been able to figure out, such as my numpad cant be used for entering numbers
    (rather it invokes commands).

14. [ad] geekamongus says:
    June 12, 2009 at 7:28 pm

    While SSH is encrypted, there are still ways in which the terminal you left open on your
    desktop could get abused. Granted, it may not be very likely in many scenarios, but someone who
    gained access to your desktop (physically or remotely) could then use that terminal. The logic
    is that if you close when you are not using it, you are inherently more secure.

15. [ad] Aeiri says:
    June 12, 2009 at 7:35 pm

    That has absolutely no relevance here. If you are logged into a machine and not locked when
    away the last thing you would probably be worrying about is a stray SSH connection. Your
    private encryption keys or even your SSH trusted keys are much more vulnerable.

16. [ad] eonbt says:
    June 12, 2009 at 7:41 pm

    If you're not connecting from a linux box, you can set putty to permanently keep alive a
    connection until it is closed or the connection is interrupted.

17. [ad] trid says:
    June 12, 2009 at 9:35 pm

    * 1) Why are half the comments from here also on the blog, with the same username?
    * 2) You make it sound as it will only send 1000 keep-alive messages and then stop, but it
    actually means that it will only close the connection after 1000 keep-alive messages did not
    get an answer.
    * 3) Setting this value to 1000 is crazy, this means a interrupted connection will go on and
    block resources for over 8 hours. The only time when this makes sense, is when you are on a bad
    connection (UMTS/3G on a train or something like that) and know that there will be some
    interruptions, but the connection will recover.
    * 4) This setting would make more sense on the client.

18. [ad] fettesps says:
    June 13, 2009 at 1:03 am

    There's a plugin that automatically shows any comments you got on Digg or Reddit in your own
    blog.
    http://valums.com/wordpress-comments-digg-reddit/

19. [ad] Neoncow says:
    June 13, 2009 at 3:17 am

    > There's a plugin that automatically shows any comments you got on Digg or Reddit in your own
    blog.

    > http://valums.com/wordpress-comments-digg-reddit/

    Super cool, you've got blogs in your reddit and reddit in your blogs!

20. [ad] speaker219 says:
    June 13, 2009 at 8:30 am

    Ah, my mistake. Thanks for clarifying.

Leave a Reply

Click here to cancel reply.

[                      ] Name (required)

[                      ] Mail (will not be published) (required)

[                      ] Website

[                                                                 ]
[                                                                 ]
[                                                                 ]
[                                                                 ]
[                                                                 ]
[                                                                 ]
[                                                                 ]
[                                                                 ]
[                                                                 ]
[                                                                 ]

 Submit Comment

[*]Notify me of follow-up comments via e-mail

[                    ] Search
  * Donate

    Did I help you out? Toss me a buck or two! Now accepting BitCoin in addition to PayPal!

     PayPal - The safer, easier way to pay online.*

  * Recent Posts

      + Cannot insert explicit value for identity column in table 'table_name' when IDENTITY_INSERT
        is set to OFF.
      + Cleaning the Roomba's Dust Filter
      + PowerDirector – Uploaded Video to Youtube Squashed
      + Android Development: R Cannot Be Resolved to a Variable
      + Down Time – Cannot Redeclare StickyClass Error
  * Recent Comments

      + marleen on This iPhone Cannot Be Used Because the Required Software Is Not Installed
      + Dhanunjaya Rao on PHP – Writing An A to Z Loop
      + Ra on VirtualBox + CentOS Hangs on "NET: Registered protocol family 2″
      + Neil T on Repairing Windows 7 Boot
      + Gab on VirtualBox + CentOS Hangs on "NET: Registered protocol family 2″
  * Categories

      + Android
      + Apple
      + Arduino
      + ASP 3.0
      + Browser Wars
      + CSS
      + Desktop
      + Drupal
      + Electronics
      + Firefox
      + Internet Explorer
      + iPhone
      + Java
      + JavaScript
      + Linux
      + Media
      + Miscellaneous
      + Opera
      + PHP
      + Press Releases
      + Programming
      + Repair
      + Robotics
      + Server
      + Tablet PCs
      + Technology
      + Windows
      + Windows 7
      + Windows Vista
      + Windows XP
  * Archives

      + July 2013
      + June 2013
      + May 2013
      + December 2012
      + November 2012
      + October 2012
      + July 2012
      + May 2012
      + April 2012
      + March 2012
      + February 2012
      + January 2012
      + December 2011
      + November 2011
      + October 2011
      + September 2011
      + August 2011
      + July 2011
      + June 2011
      + May 2011
      + April 2011
      + March 2011
      + February 2011
      + January 2011
      + December 2010
      + November 2010
      + October 2010
      + September 2010
      + July 2010
      + June 2010
      + May 2010
      + April 2010
      + February 2010
      + January 2010
      + December 2009
      + November 2009
      + October 2009
      + September 2009
      + August 2009
      + July 2009
      + June 2009
      + May 2009
      + March 2009
      + February 2009
      + January 2009
      + August 2008
      + May 2007
      + April 2007
      + September 2005
      + March 2005
      + October 2004
  * Blogroll

      + Cody Taylor
      + Liquid Code Federation
      + Rechargeable Batteries Canada
      + Reclaimed By Nature
  * Meta

      + Log in
      + Entries RSS
      + Comments RSS
      + WordPress.org

Copyright © 2009-2013 FettesPS. All rights reserved.
RSS Subscription: Entries RSS Comments RSS | WP Login, Valid XHTML
web counter

#+end_example
** web page: bash - SSH into a box with a frequently changed IP - Server Fault
http://serverfault.com/questions/193631/ssh-into-a-box-with-a-frequently-changed-ip
*** webcontent                                                     :noexport:
#+begin_example
Location: http://serverfault.com/questions/193631/ssh-into-a-box-with-a-frequently-changed-ip
Stack Exchange
sign up | log in | careers 2.0 |
[                            ]

Server Fault

  * Questions
  * Tags
  * Tour
  * Users

  * Ask Question

Tell me more ×
Server Fault is a question and answer site for professional system and network administrators. It's
100% free, no registration required.

SSH into a box with a frequently changed IP

               I have some cloud boxes that change their IP frequently.

               I ssh using the hostname but have to edit the known_hosts file every time the server
               launches because of this error message:

               @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
               @    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
               @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
               IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
               Someone could be eavesdropping on you right now (man-in-the-middle attack)!
up vote 8 down It is also possible that the RSA host key has just been changed.
vote favorite  The fingerprint for the RSA key sent by the remote host is...
1
               Aside from any security risks and such that are associated with what I want to do,
               is there a way to either ignore this error or overwrite the known_hosts file
               automatically such that I don't always have to edit it myself?

               ssh bash known-hosts fingerprint

                                           asked Oct 21 '10 at 22:13
               share|improve this question [c0]
                                           coneybeare
                                           1797

5 Answers

active oldest votes

                Edit your ssh_config file and add change this line:

                CheckHostIP no

                CheckHostIP defaults to 'yes'. What this does is to do just the kind of check
up vote 10 down you're failing. Turning it off means it just trusts that the IP is variable, and
vote accepted   will to key-checking against the hostname.

                                          answered Oct 21 '10 at 22:31
                share|improve this answer                         [1f]
                                                         sysadmin1138♦
                                                           75.1k888193

                   marked right amongst other similar answers for proper code formatting. –
                   coneybeare Oct 21 '10 at 22:41

                Addition: you could try only disabling the CheckHostIP check for that name:

                Host *
                  [ global settings .. ]

up vote 5 down  Host very.dynamic.host
vote              CheckHostIP no

                                          answered Oct 22 '10 at 9:45
                share|improve this answer                        [f1]
                                                    Koos van den Hout
                                                                46527

                1   This is the best option to reduce the security impact of disabling IP-checking.
                    –  Espo Oct 22 '10 at 12:58

             You can set StrictHostKeyChecking=no in your ssh client configuration (i.e. The ~/ssh/
             config file on the machine that you connect from), to ignore the warning.

up vote 1                              answered Oct 21 '10 at 22:29
down vote    share|improve this answer                         [32]
                                                            hayalci
                                                          2,5051021

           You could put CheckHostIP no into your ~/.ssh/config file, but that leaves you open to
           spoofing attacks. If you're not concerned about that, then this setting should turn off
           the known_hosts check.
up vote 1
down vote                            answered Oct 21 '10 at 22:31
           share|improve this answer                         [89]
                                                    Steven Monday
                                                       6,17521022

                     Make known_hosts read-only.

                                               answered Oct 22 '10 at 13:47
up vote 0 down vote  share|improve this answer                         [c4]
                                                                 Ubersoldat
                                                                       1253

Your Answer

[                                                                                            ]
[                                                                                            ]
[                                                                                            ]
[                                                                                            ]
[                                                                                            ]
[                                                                                            ]
[                                                                                            ]
[                                                                                            ]
[                                                                                            ]
[                                                                                            ]
[                                                                                            ]
[                                                                                            ]
[                                                                                            ]
[                                                                                            ]
[                                                                                            ]

draft saved
draft discarded
[                    ]

Sign up or login

Sign up using Google

Sign up using Facebook

Sign up using Stack Exchange

Submit

Post as a guest

Name [                              ]
Email [                              ] required, but not shown

Post as a guest

Name [                              ]
Email [                              ] required, but not shown

 Post Your Answer  discard

By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for? Browse other questions tagged ssh bash known-hosts fingerprint
or ask your own question.

tagged

ssh × 3939
bash × 1752
known-hosts × 17
fingerprint × 8

asked  3 years ago

viewed 828 times

active 3 years ago

Related

3
Error connecting to server through ssh
14
How to remove strict RSA key checking in SSH and what's the problem here?
3
ssh "WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!"
1
How can I keep SSH's know_hosts up to date (semi-securely)?
1
ssh problem at CentOS 5.6
13
"Add correct host key in known_hosts" / multiple ssh host keys per hostname?
2
Different ssh fingerprints on server. (MITM attack?)
29
Smoothest workflow to handle SSH host verification errors?
0
Permission Denied ( publickey) while ssh to ec2
1
Turn off strict checking of ssh keys
question feed
*
lang-sh
about help badges blog chat data legal privacy policy jobs advertising info mobile contact us
feedback

                    Technology                        Life / Arts      Culture /         Science         Other
                                                                       Recreation
                  1. Programmers
                  2. Unix &                                          1. English
                     Linux                                              Language &
 1. Stack         3. Ask                             1. Photography     Usage         1. Mathematics
    Overflow         Different    1. Database        2. Science      2. Skeptics      2. Cross         1. Stack
 2. Server Fault     (Apple)         Administrators     Fiction &    3. Mi Yodeya        Validated        Apps
 3. Super User    4. WordPress    2. Drupal Answers     Fantasy         (Judaism)        (stats)       2. Meta
 4. Web              Answers      3. SharePoint      3. Seasoned     4. Travel        3. Theoretical      Stack
    Applications  5. Geographic   4. User               Advice       5. Christianity     Computer         Overflow
 5. Ask Ubuntu       Information     Experience         (cooking)    6. Arqade           Science       3. Area 51
 6. Webmasters       Systems      5. Mathematica     4. Home            (gaming)      4. Physics       4. Stack
 7. Game          6. Electrical   6. more (14)          Improvement  7. Bicycles      5. MathOverflow     Overflow
    Development      Engineering                     5. more (13)    8. Role-playing  6. more (7)         Careers
 8. TeX - LaTeX   7. Android                                            Games
                     Enthusiasts                                     9. more (21)
                  8. Information
                     Security

site design / logo © 2013 stack exchange inc; user contributions licensed under cc-wiki with
attribution required

rev 2013.11.15.1158
Server Fault works best with JavaScript enabled[p-c1rF4kxg]

#+end_example
** DONE sshd出现问题: /etc/ssh/ssh_config
  CLOSED: [2013-08-23 Fri 15:10]
ServerAliveInterval 60
** DONE Server keeps asking for password after I've copied my SSH Public Key to authorized_keys: /root/ should be 700, instead of 777
  CLOSED: [2015-02-25 Wed 09:03]
http://askubuntu.com/questions/110814/server-keeps-asking-for-password-after-ive-copied-my-ssh-public-key-to-authoriz
http://serverfault.com/questions/360496/i-created-an-rsa-key-but-ssh-keeps-asking-the-password
*** /var/log/auth.log
#+BEGIN_EXAMPLE
root@fluig-id-cdn-01:~/.ssh# tail -f /var/log/auth.log
tail -f /var/log/auth.log
Feb 25 15:00:00 fluig-id-cdn-01 sshd[48492]: Authentication refused: bad ownership or modes for directory /root

Feb 25 15:00:01 fluig-id-cdn-01 CRON[48515]: pam_unix(cron:session): session opened for user root by (uid=0)
Feb 25 15:00:01 fluig-id-cdn-01 CRON[48515]: pam_unix(cron:session): session closed for user root
Feb 25 15:00:01 fluig-id-cdn-01 sudo:   nagios : TTY=unknown ; PWD=/ ; USER=root ; COMMAND=/usr/bin/python /usr/lib/nagios/plug
#+END_EXAMPLE
*** /root/ acl issue
#+BEGIN_EXAMPLE
root@fluig-id-cdn-01:~/.ssh# ls -lth / | grep 'root$'
ls -lth / | grep 'root$'
drwxrwxrwx  11 root root  4.0K Feb 25 14:50 root
root@fluig-id-cdn-01:~/.ssh# chmod 700 /root/
chmod 700 /root/
#+END_EXAMPLE
** DONE ssh config syntax: /root/.ssh/config
  CLOSED: [2015-03-09 Mon 22:01]
http://nerderati.com/2011/03/17/simplify-your-life-with-an-ssh-config-file/
echo -e "Host github.com\n\tStrictHostKeyChecking no\n\tIdentityFile /root/.ssh/id_rsa\n" >> /root/.ssh/config

#+BEGIN_EXAMPLE
~/.ssh/config
However, there's a much more elegant and flexible solution to this problem. Enter the SSH config file:

# contents of $HOME/.ssh/config
Host dev
    HostName dev.example.com
    Port 22000
    StrictHostKeyChecking no
    User fooey
    IdentityFile /root/.ssh/id_rsa
#+END_EXAMPLE
** web page: Two Factor SSH Authentication
https://sethvargo.com/two-factor-ssh-authentication/
*** webcontent                                                     :noexport:
#+begin_example
Location: https://sethvargo.com/two-factor-ssh-authentication/
Seth Vargo

Two Factor SSH Authentication

Introduction

user

Seth Vargo

  *
  *
  *
  *

Ruby, Technology, Rants and Pants

---------------------------------------------------------------------------------------------------

Security • SSH

Two Factor SSH Authentication

Posted on January 7, 2013.
Featured

Security • SSH

Two Factor SSH Authentication

Posted on January 7, 2013.

With many popular websites providing two factor authentication, why shouldn't you add two-factor
authentication to SSH? Public-key, Private-key encryption is generally considered to be very
secure, but why not take an extra step?

This tutorial will use the open source Google Authenticator project and PAM for setting up
two-factor authentication.

Install Google Authentication on your Machine

On ubuntu, you'll need to install the libpam0g-dev dependency:

sudo apt-get install libpam0g-dev

The package is pam-devel on REHL, and may vary from platform-to-platform.

Clone the project into a temporary location and your server and install:

cd tmp
git clone https://google-authenticator.googlecode.com/git google-authenticator
cd google-authenticator/libpam
make && sudo make install

Configure SSHD

Add the following at the top of your /etc/pam.d/sshd file:

auth       required     pam_google_authenticator.so

The whole file should look something like this:

# PAM configuration for the Secure Shell service

# Read environment variables from /etc/environment and
# /etc/security/pam_env.conf.
auth       required     pam_google_authenticator.so # Two-Factor Auth
auth       required     pam_env.so # [1]
# In Debian 4.0 (etch), locale-related environment variables were moved to
# /etc/default/locale, so read that as well.
auth       required     pam_env.so envfile=/etc/default/locale

# Standard Un*x authentication.
@include common-auth

# Disallow non-root logins when /etc/nologin exists.
account    required     pam_nologin.so

# Uncomment and edit /etc/security/access.conf if you need to set complex
# access limits that are hard to express in sshd_config.
# account  required     pam_access.so

# Standard Un*x authorization.
@include common-account

# Standard Un*x session setup and teardown.
@include common-session

# Print the message of the day upon successful login.
session    optional     pam_motd.so # [1]

# Print the status of the user's mailbox upon successful login.
session    optional     pam_mail.so standard noenv # [1]

# Set up user limits from /etc/security/limits.conf.
session    required     pam_limits.so

# Set up SELinux capabilities (need modified pam)
# session  required     pam_selinux.so multiple

# Standard Un*x password updating.
@include common-password

Make sure you have ChallengeReponseAuthentication set to yes in your /etc/ssh/sshd_config file:

# /etc/ssh/sshd_config
ChallengeResponseAuthentication yes

Install Google Authenticator for you smartphone

Download Google Authenticator on your iPhone/Android/Blackberry device.

Setup your Account with 2-Factor Authentication

The command we ran earlier added the google-authenticator executable to our $PATH. As the user
desiring two factor authentication, run:

google-authenticator

This will generate a secret key, add a file to your home directory in ~/.google_authenticator, ask
you some preference questions, and output a bunch of stuff. They are very self explanatory, so we
won't cover them here.

$ google-authenticator

https://www.google.com/chart?chs=200x200&chld=M|0&cht=qr&chl=otpauth://totp/user@example.com%3Fsecret%3DAAAA

Your new secret key is: AAAAAAAAAAAAAAAA
Your verification code is 123123
Your emergency scratch codes are:
XXXXXX
XXXXXX
XXXXXX
XXXXXX

Do you want me to update your "~/.google_authenticator" file (y/n)

# ...

Configure Google Authenticator

Visit the URL to printed out in the above command in your browser. It will be a barcode that you
can scan with Google Authenticator. It will prompt your for your secret key.

Test it Out

Restart SSH

sudo service sshd restart

And try logging in from another terminal session. Leave this session open in case things are
broken.

You should see something like this:

$ ssh user@example.com
PAM Verification Code: |

Enter the code shown on your phone's screen. Note that codes are only good for a short period of
time.

  * Twitter
  * Facebook

    Security SSH

user

Seth Vargo

https://sethvargo.com

Seth is a software engineer and open source advocate at at HashiCorp. Previously, Seth worked at
Chef (Opscode), CustomInk, and a few Pittsburgh-based startups. He is a co-author of Learning Chef
and is passionate about inequality in technology and organizational culture. When he is not writing
software or working on open source, Seth enjoys speaking at local user groups and conferences. He
is a co-organizer for DevOps Days Pittsburgh and loves all things bacon. You can find him on the
Internet.

  *
  *
  *
  *
  *
  *
  *
  *

View Comments...
Copyright © 2015 Seth Vargo • All rights reserved. Proudly hosted on DigitalOcean.

#+end_example
** web page: How To Fix Offending key in ~/.ssh/known_hosts file
http://www.thegeekstuff.com/2010/04/how-to-fix-offending-key-in-sshknown_hosts-file/
*** webcontent                                                     :noexport:
#+begin_example
Location: http://www.thegeekstuff.com/2010/04/how-to-fix-offending-key-in-sshknown_hosts-file/
The Geek Stuff

  * Home
  * Free eBook
  * Contact
  * About
  * Start Here

How To Fix Offending key in ~/.ssh/known_hosts file

by Ramesh Natarajan on April 30, 2010

Tweet

As we discussed earlier in our basic ssh client commands article, when you do ssh to a machine for
the 1st time (or whenever there is a key change in the remote machine), you will be prompted to say
'yes' for authenticity of host.

This feature is controlled using StrictHostKeyChecking ssh parameter. By default
StrictHostKeyChecking is set to yes.

The default setting of "StrictHostKeyChecking yes" is the best option from security point of view
to protect your system against any trojan horse attacks. If you don't know what you are doing, you
should not set StrictHostKeyChecking to no.

Sometimes it might be good to disable it temporarily. For example, 1st time when you are connecting
to lot of known hosts, you might want to set disable this feature (i.e asking yes for host keys)
and let ssh add automatically all the host keys. Later you can enable this feature.

When you have configured automated passwordless login for a server and if the remote host key keeps
changing for a reason (that you know why it is changing), you might want to consider setting
StrictHostKeyChecking to no until the problem of remote host key keep changing is fixed.

From the ssh command line, you can pass StrictHostKeyChecking option as shown below. You can also
set this option in your ssh_config file

# ssh -o 'StrictHostKeyChecking no' user@host

If you are logging in to the server for the 1st time, it would permanently add the RSA to the list
of known hosts without prompting you.

But, if there is a key change (normally if the OS (or sshd) is reinstalled, the remote host key
will change), then you have to delete old invalid key as shown below.

Remove the offending ssh key

Following error will be displayed when the remote host key changes (after you've connected earlier
with a valid remote host key).

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that the RSA host key has just been changed.
The fingerprint for the RSA key sent by the remote host is
a7:a8:f2:97:94:33:58:b7:9d:bc:e0:a6:6b:f7:0a:29.
Please contact your system administrator.
Add correct host key in /home/ramesh/.ssh/known_hosts to get rid of this message.
Offending key in /home/ramesh/.ssh/known_hosts: 6
Permission denied (publickey,password).

You have to remove the key to proceed further. Use the following command to remove the offending
key.,

# sed -i '6d' ~/.ssh/known_hosts

Note: Change the 6d according to the line number shown.

If your sed does not have -i option, use perl or use some editor to remove the offending key.

Perl solution:

# perl -pi -e 's/\Q$_// if ($. == 6);' ~/.ssh/known_hosts

Note: Change the line number from 6 to appropriate line number.

Tweet
> Add your comment

If you enjoyed this article, you might also like..

 1. 50 Linux Sysadmin Tutorials
 2. 50 Most Frequently Used Linux Commands (With       * Awk Introduction – 7 Awk Print Examples
    Examples)                                          * Advanced Sed Substitution Examples
 3. Top 25 Best Linux Performance Monitoring and       * 8 Essential Vim Editor Navigation
    Debugging Tools                                      Fundamentals
 4. Mommy, I found it! – 15 Practical Linux Find       * 25 Most Frequently Used Linux IPTables
    Command Examples                                     Rules Examples
 5. Linux 101 Hacks 2nd Edition eBook Linux 101        * Turbocharge PuTTY with 12 Powerful Add-Ons
    Hacks Book

      Bash 101 Hacks Book  Sed and Awk 101 Hacks Book  Nagios Core 3 Book  Vim 101 Hacks Book

Tags: /etc/ssh/sshd_config, /etc/ssh/ssh_config, ssh, StrictHostKeyChecking, ~/.ssh/known_hosts

{ 27 comments... read them below or add one }

1 unixadmin007 April 30, 2010 at 2:30 am

    how can we do same in vi.. i.e. without opening the vi editor how can we delete this line
    number??

2 fedov April 30, 2010 at 4:22 am

    A less cryptic Perl-Solution:

    perl -ni -e 'print if ($. != 6);' ~/.ssh/known_hosts

3 Lonnie Olson April 30, 2010 at 10:41 am

    You should update your post to include the official OpenSSH way to do it.

    ssh-keygen -R hostname

4 Mithun April 30, 2010 at 12:39 pm

    # More straight forward

    # Remove offending key
    ssh-keygen -R hostname

    # Add it back
    ssh -o 'StrictHostKeyChecking no' user@host

5 Jim Douglas April 30, 2010 at 3:52 pm

    Thanks.... this was a good tip for me.....

6 Sivakumar May 5, 2010 at 10:49 pm

    The below option also does the same tricks, with much less hazels

    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no

7 Thiruvenkatasamy January 10, 2012 at 9:48 am

    I faced the same issue in two different (Unix)flavors. The first time i used the "Sed" with -i
    syntax. It works out.
    Second time in Sun OS it was not worked and i tried the "perl" syntax... awesome..!!
    Good result ... Thanks Geeks for your stuffs!!!

8 Sonam June 28, 2012 at 7:18 pm

    this is written for vi newbies. Others please excuse.

    vi +6 ~.ssh/known_hosts (Instruct vi to take you directly to the offending line in file)
    (Take a look at the hostname - verify this is the key you want to delete)
    (Press 'dd' to delete the line)
    (Command ':wq' to write the file and quit)

    Alternatively, open known_hosts using vi and issue command ':se nu' to make line numbers
    visible.

9 Doug September 28, 2012 at 2:18 pm

    Thanks for this article. I used the info. here and it fixed my problem.

10 Kuldeep November 9, 2012 at 1:41 pm

    Thanks ......It works . ........I have used it when I installed new OS (ubuntu 12.04)

11 Shva December 18, 2012 at 11:08 pm

    Thank you! This helped me

12 dr memals January 20, 2013 at 3:41 pm

    I was booting the same hardware with different media, so completely different OSs and needed
    BOTH ssh keys to work. The solution
    ssh-keyscan -t rsa ip_address >> ~/.ssh/known_hosts

13 stu February 14, 2013 at 10:29 am

    Thanks Dude, this post saved me a motorway crawl.

    Stu

14 Rihan February 25, 2013 at 11:04 pm

    Thanks, it helped me.. :)

15 bucshee March 8, 2013 at 9:31 am

    But is there a way to do this automatically? I mean if the SSH Key changes for a device already
    in the known hosts file to have the new key overwritten and then connect via ssh using the new
    key.

16 Mikey April 25, 2013 at 9:51 am

    Much appreciated for you posting this page. It helped me solve my problem.

17 Brad Allison June 8, 2013 at 1:38 am

    sed always has the -i option.

    just BSD sed (like you find on macosx) requires you pass -i and option like "sed -i .bak".

    But sed always has the -i option. GNU sed just doesn't require a field after it like BSD sed
    does.

18 Ismaila Ajenifuja August 28, 2013 at 1:48 pm

    The solution provided is awesome and the best so far. Just the one line command: "sed -i '6d' ~
    /.ssh/known_hosts"

    Thanks a lot

19 Chris September 10, 2013 at 2:53 am

    Lonnie and Mithun, said it easiest way I always forget the letter, R, which is how I just ended
    up here, but... ~$ ssh-keygen -R (IP or Host) and then just connect as normal ssh user@(ip or
    host) again! YThen yes to confirm add to known hosts.

20 Suresh September 11, 2013 at 3:45 pm

    It really worked

21 julian December 8, 2013 at 1:46 am

    Doesn't work:
    Julians-Air:~ jellycat$ sed -i '13d' ~/.ssh/known_hosts
    sed: 1: "/Users/jellycat/.ssh/kn ...": invalid command code j
    (on OSX)

22 Yeaoh February 24, 2014 at 9:57 pm

    the sed method didn't work for me, but the perl one worked fine. I was on MAC OSX 10.9. Still
    I'm curious about why the sed would return something like like this
    sed: 1: "/Users/myuser/.ssh/kno ...": extra characters at the end of g command

23 kk June 9, 2014 at 3:51 am

    This helped me in realtime production environment thanks a lot...

24 Rodrigo November 2, 2014 at 9:53 pm

    Thank you very much.... I used the perl solution because sed didn't work to me..
    Working very well here...

25 Elham December 3, 2014 at 2:46 am

    Tanks very much.my problem is solved

26 factgasm February 20, 2015 at 7:41 pm

    Thanks for the post, but had Linux's developers included this advice in the error message in
    instead of the juvenile crap they did inculde then this post – and all the searches performed
    to find it – would never have been necessary in the first place

    This mentality sums up Linux very well indeed; they'd rather snigger at the expense of
    inexperienced users than provide a professional solution that produces fast and effective
    results. And to think that they have the temerity to knock Microsoft.

27 factgasm February 20, 2015 at 8:03 pm

    Thanks for the post, but had Linux's developers displayed this advice in their error message
    instead of the irresponsible juvenile nonsense they do, then this article – and all the
    searches performed to find it – would never have been necessary in the first place.

Leave a Comment

[                    ]Name

[                    ]E-mail

[                    ]Website

[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]

[ ] Notify me of followup comments via e-mail

 Submit

Previous post: How to Install MySQL Database Using Yum groupinstall on CentOS

Next post: Bash Variable Tutorial – 6 Practical Bash Global and Local Variable Examples

  * RSS  |  Email  |  Twitter  |  Facebook  |  Google+

    [                                   ]  Search

  *
  * EBOOKS

      + Linux 101 Hacks Book Linux 101 Hacks 2nd Edition eBook - Practical Examples to Build a
        Strong Foundation in Linux
      + Bash 101 Hacks eBook - Take Control of Your Bash Command Line and Shell Scripting
      + Sed and Awk 101 Hacks eBook - Enhance Your UNIX / Linux Life with Sed and Awk
      + Vim 101 Hacks eBook - Practical Examples for Becoming Fast and Productive in Vim Editor
      + Nagios Core 3 eBook - Monitor Everything, Be Proactive, and Sleep Well
  *
  * POPULAR POSTS

      + 12 Amazing and Essential Linux Books To Enrich Your Brain and Library
      + 50 UNIX / Linux Sysadmin Tutorials
      + 50 Most Frequently Used UNIX / Linux Commands (With Examples)
      + How To Be Productive and Get Things Done Using GTD
      + 30 Things To Do When you are Bored and have a Computer
      + Linux Directory Structure (File System Structure) Explained with Examples
      + Linux Crontab: 15 Awesome Cron Job Examples
      + Get a Grip on the Grep! – 15 Practical Grep Command Examples
      + Unix LS Command: 15 Practical Examples
      + 15 Examples To Master Linux Command Line History
      + Top 10 Open Source Bug Tracking System
      + Vi and Vim Macro Tutorial: How To Record and Play
      + Mommy, I found it! -- 15 Practical Linux Find Command Examples
      + 15 Awesome Gmail Tips and Tricks
      + 15 Awesome Google Search Tips and Tricks
      + RAID 0, RAID 1, RAID 5, RAID 10 Explained with Diagrams
      + Can You Top This? 15 Practical Linux Top Command Examples
      + Top 5 Best System Monitoring Tools
      + Top 5 Best Linux OS Distributions
      + How To Monitor Remote Linux Host using Nagios 3.0
      + Awk Introduction Tutorial – 7 Awk Print Examples
      + How to Backup Linux? 15 rsync Command Examples
      + The Ultimate Wget Download Guide With 15 Awesome Examples
      + Top 5 Best Linux Text Editors
      + Packet Analyzer: 15 TCPDUMP Command Examples
      + The Ultimate Bash Array Tutorial with 15 Examples
      + 3 Steps to Perform SSH Login Without Password Using ssh-keygen & ssh-copy-id
      + Unix Sed Tutorial: Advanced Sed Substitution Examples
      + UNIX / Linux: 10 Netstat Command Examples
      + The Ultimate Guide for Creating Strong Passwords
      + 6 Steps to Secure Your Home Wireless Network
      + Turbocharge PuTTY with 12 Powerful Add-Ons
  * CATEGORIES

      + Linux Tutorials
      + Vim Editor
      + Sed Scripting
      + Awk Scripting
      + Bash Shell Scripting
      + Nagios Monitoring
      + OpenSSH
      + IPTables Firewall
      + Apache Web Server
      + MySQL Database
      + Perl Programming
      + Google Tutorials
      + Ubuntu Tutorials
      + PostgreSQL DB
      + Hello World Examples
      + C Programming
      + C++ Programming
      + DELL Server Tutorials
      + Oracle Database
      + VMware Tutorials
  *

  * About The Geek Stuff

    Linux 101 Hacks Book My name is Ramesh Natarajan. I will be posting instruction guides, how-to,
    troubleshooting tips and tricks on Linux, database, hardware, security and web. My focus is to
    write articles that will either teach you or help you resolve a problem. Read more about Ramesh
    Natarajan and the blog.
  * Support Us

    Support this blog by purchasing one of my ebooks.

    Bash 101 Hacks eBook

    Sed and Awk 101 Hacks eBook

    Vim 101 Hacks eBook

    Nagios Core 3 eBook
  * Contact Us

    Email Me : Use this Contact Form to get in touch me with your comments, questions or
    suggestions about this site. You can also simply drop me a line to say hello!.

    Follow us on Google+

    Follow us on Twitter

    Become a fan on Facebook

Copyright © 2008–2014 Ramesh Natarajan. All rights reserved | Terms of Service

#+end_example
** web page: Linux / Unix: Disable OpenSSH Host Key Checking
http://www.cyberciti.biz/faq/linux-appleosx-howto-disable-ssh-host-key-checking/
*** webcontent                                                     :noexport:
#+begin_example
Location: http://www.cyberciti.biz/faq/linux-appleosx-howto-disable-ssh-host-key-checking/
  * Tutorials
      + BASH Shell
      + Troubleshooting
      + Nginx
      + Networking
      + MySQL
      + Google Cloud Platform
      + Amazon Cloud Computing
      + Rackspace Cloud Computing
      + Linux
          o CentOS
          o Debian / Ubuntu
          o Ubuntu Linux
          o Suse
          o RedHat and Friends
          o Slackware Linux
      + UNIX
          o AIX
          o Mac OS X
          o FreeBSD
          o FreeBSD Jails (VPS)
          o Openbsd
          o Solaris
      + See all tutorial topics
  * Blog
  * About
  * Contact us
  * Forum
  * Linux Scripting Guide
  * RSS/FEED

Linux FAQ / Howtos

Linux / Unix: Disable OpenSSH Host Key Checking

by nixCraft on December 30, 2011 · 4 comments· LAST UPDATED December 30, 2011

in Openbsd

[openbsd_lo]

I've a remote Unix server running with OpenSSH remote login service. The openssh is configured for
passwordless login using ssh keys. Our ISP allows to boot all Linux servers into the rescue mode.
It allow us to bring a server online remotely in order to troubleshoot system problems that would
normally only be resolved by an OS Reload (such as accidentally deleting files or wrong firewall
configurations blocking ssh access). When server boots into a remote rescue mode I can connect
using SSH. They SSH keys will not be the same in the rescue mode so I get key mismatch messages as
SSH keys are re-generated on each boot:

    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
    Someone could be eavesdropping on you right now (man-in-the-middle attack)!
    It is also possible that the RSA host key has just been changed.
    The fingerprint for the RSA key sent by the remote host is
    e1:9b:5c:16:a6:cd:11:10:3a:cd:1b:a2:16:cd:e5:1c.
    Please contact your system administrator.
    Add correct host key in /home/user/.ssh/known_hosts to get rid of this message.
    Offending key in /home/user/.ssh/known_hosts:1
    RSA host key for www.cyberciti.biz has changed and you have requested strict checking.
    Host key verification failed.

How do I ignore OpenSSH hos key checking from my Apple OS X laptop while login using the ssh?

The UserKnownHostsFile option defines a file to use for the user host key database instead of the
default ~/.ssh/known_hosts. You can set this to /dev/null. The StrictHostKeyChecking must be set to
no", so that ssh will automatically add new host keys to the user known hosts files. If this flag
is set to "ask", new host keys will be added to the user known host files only after the user has
confirmed that is what they really want to do, and ssh will refuse to connect to hosts whose host
key has changed. The host keys of known hosts will be verified automatically in all cases. The
argument must be "yes", "no" or "ask". The default is set to "ask". The syntax is as follows:

ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no user@server1.example.com
ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no user@www.cyberciti.biz
ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no user@nixcraft.com
ssh -o UserKnownHostsFile=/dev/null,StrictHostKeyChecking=no user@nixcraft.com

[warning-40]WARNING! These examples demonstrates a pretty serious security issues. I strongly
suggests that you use the ssh-keygen command to get rid of this problem in secure manner.

You can define the bash shell alias as follows:

alias newssh='ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'

You can use the command as follows:

newssh user@server1.example.com
newssh vivek@www.cyberciti.biz

A Note About rsync Command

The syntax is as follows:

rsync -e 'ssh -o UserKnownHostsFile=/dev/null,StrictHostKeyChecking=no' -avr filename vivek@www.cyberciti.biz:/path/to/dest

rsync -e 'ssh -o UserKnownHostsFile=/dev/null,StrictHostKeyChecking=no' -avr /path/to/src vivek@www.cyberciti.biz:/path/to/dest

As I said earlier this could lead into a security issue, so pass the -R option to ssh-keygen
command to removes all keys belonging to hostname from a known_hosts file. This option is useful to
delete hashed hosts. If your remote hostname is www.cyberciti.biz, enter:
$ host www.cyberciti.biz
$ ssh-keygen -R www.cyberciti.biz
$ ssh-keygen -R 1.2.3.4

Note: You need to replace the www.cyberciti.biz and 1.2.3.4 with actual host name and IP address.

Tweet itFacebook itG+ itDownload PDF versionFound an error/typo on this page?
Featured Articles:

  * 30 Cool Open Source Software I Discovered in 2013 [new_post]
  * 30 Handy Bash Shell Aliases For Linux / Unix / Mac OS X
  * Top 30 Nmap Command Examples For Sys/Network Admins
  * 25 PHP Security Best Practices For Sys Admins
  * 20 Linux System Monitoring Tools Every SysAdmin Should Know
  * 20 Linux Server Hardening Security Tips
  * Linux: 20 Iptables Examples For New SysAdmins
  * Top 20 OpenSSH Server Best Security Practices
  * Top 20 Nginx WebServer Best Security Practices
  * 20 Examples: Make Sure Unix / Linux Configuration Files Are Free From Syntax Errors
  * 15 Greatest Open Source Terminal Applications Of 2012
  * My 10 UNIX Command Line Mistakes
  * Top 10 Open Source Web-Based Project Management Software
  * Top 5 Email Client For Linux, Mac OS X, and Windows Users
  * The Novice Guide To Buying A Linux Laptop

{ 4 comments... read them below or add one }

1 Jamie December 30, 2011 at 6:45 pm

    You could also uncomment the StrictHostKeyChecking in your respective ssh_config file and
    change the value from ask to no and it will auto populate any new values to your known_hosts
    file.

    Reply

    2 aa May 9, 2013 at 6:35 pm

        this works, thanks.

        Reply

3 three sixes January 20, 2012 at 8:01 pm

    delete your ssh key file...

    rm $HOME/.ssh/known_hosts

    (to permanently fix this.... and also force you to review and accept keys every time)
    ln -s /home/$USER/.ssh/known_hosts /dev/null

    put your key in the garbage and reconnect. symlink puts any new keys in the garbage by default.

    Reply

4 Mac October 16, 2012 at 12:45 pm

    How would one write a script or 1 line command to remove the offending host from the knownhost
    file? I am still learning bash.

    Reply

Cancel reply

Leave a Comment

[                    ]Name *

[                    ]E-mail *

[                    ]Website

[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]
[                                        ]

[ ] Notify me of followup comments via e-mail

 Submit

Tagged as: apple os x, deleting files, fingerprint, host identification, host key, host keys, hosts
files, linux servers, man in the middle attack, openssh, rescue mode, rsa key, rsync command, ssh
command, SSH StrictHostKeyChecking=no, SSH UserKnownHostsFile=/dev/null, unix server

Previous Faq: CentOS / RHEL: yum Command Reinstall Package

Next Faq: How To List Directories In Linux or Unix Recursively

twitter youtube googleplus  facebook rss email

  *
  *
  * Subscribe to nixCraft

    Learn something new about Linux/Unix by email

    Enter your email address:

    [                    ]

     Subscribe
  *
  * RSS Latest posts from our blog

      + A Shell Primer: Master Your Linux, OS X, Unix Shell Environment
      + 7 Awesome Open Source Cloud Storage Software For Your Privacy and Security
      + 20 Unix Command Line Tricks – Part I
      + 5 Awesome Open Source Backup Software For Linux and Unix-like Systems
      + 8 Tips to Solve Linux & Unix Systems Hard Disk Problems Like Disk Full Or Can't Write to
        the Disk

©2000-2015 nixCraft. All rights reserved. Privacy Policy - Terms of Service - Questions or
Comments - We are proudly powered by Linux + Nginx + WordPress. The content is copyrighted to
nixCraft and may not be reproduced on other websites.

#+end_example
** web page: How to fix "sshd error: could not load host key" - Ask Xmodulo
http://ask.xmodulo.com/sshd-error-could-not-load-host-key.html
*** webcontent                                                     :noexport:
#+begin_example
Location: http://ask.xmodulo.com/sshd-error-could-not-load-host-key.html
Home

  * Home
  * About
  * Advertise
  * Ask a Question

Ask Xmodulo

Find answers to commonly asked Linux questions

[facebook][twitter][googleplus][linkedin][rss-feed]

How to fix "sshd error: could not load host key"

Posted on October 17, 2014 by Dan Nanni 1 Comment
Question: When I try to SSH to a remote server, SSH client fails with "Connection closed by
X.X.X.X". On the SSH server side, I see error messages: "sshd error: could not load host key." What
is going on, and how can I fix this error?

The detailed symptom of this SSH connection error is as follows.

SSH client side: when you attempt to SSH to a remote host, you don't see login screen, and your SSH
connection is closed right away with a message: "Connection closed by X.X.X.X"

SSH server side: in a system log, you see the following error messages (e.g., /var/log/auth.log on
Debian/Ubuntu).

Oct 16 08:59:45 openstack sshd[1214]: error: Could not load host key: /etc/ssh/ssh_host_rsa_key
Oct 16 08:59:45 openstack sshd[1214]: error: Could not load host key: /etc/ssh/ssh_host_dsa_key
Oct 16 08:59:45 openstack sshd[1214]: error: Could not load host key: /etc/ssh/ssh_host_ecdsa_key
Oct 16 08:59:45 openstack sshd[1214]: fatal: No supported key exchange algorithms [preauth]

The root cause of this problem is that sshd daemon somehow is not able to load SSH host keys.

When OpenSSH server is first installed on Linux system, SSH host keys should automatically be
generated for subsequent use. If, however, key generation was not finished successfully, that can
cause SSH login problems like this.

Let's check if SSH host keys are found where they should be.

$ ls -al /etc/ssh/ssh*key

[wAAACwAAAA][1536723109]

If SSH host keys are not found there, or their size is all truncated to zero (like above), you need
to regenerate SSH host keys from scratch.

Regenerate SSH Host Keys

On Debian, Ubuntu or their derivatives, you can use dpkg-reconfigure tool to regenerate SSH host
keys as follows.

$ sudo rm -r /etc/ssh/ssh*key
$ sudo dpkg-reconfigure openssh-server

[wAAACwAAAA][1555117963]

On CentOS, RHEL or Fedora, all you have to do is to restart sshd after removing existing
(problematic) keys.

$ sudo rm -r /etc/ssh/ssh*key
$ sudo systemctl restart sshd

An alternative way to regenerate SSH host keys is to manually generate them using ssh-keygen
command.

$ sudo ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key
$ sudo ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key
$ sudo ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key

[wAAACwAAAA][1536784476]

Once new SSH host keys are generated, make sure that they are found in /etc/ssh directory. There is
no need to restart sshd at this point.

$ ls -al /etc/ssh/ssh*key

Now try to SSH again to the SSH server to see if the problem is gone.

[wAAACwAAAA][rss_small] Subscribe to Ask Xmodulo

Do you want to receive Linux related questions & answers published at Ask Xmodulo? Enter your email
address below, and we will deliver our Linux Q&A straight to your email box, for free. Delivery
powered by Google Feedburner.

[Your email address  ] Subscribe
Share this FAQ:

  *
  *
  * [wAAACwAAAA]
  * [wAAACwAAAA]
  *

Categories: Networking, Security

Tags: key, ssh

One thought on "How to fix "sshd error: could not load host key""

 1. Reply
    [wAAACwA][bc712c5]Shane on October 20, 2014 at 1:43 am said:

    Thank you very much!

Leave a comment Cancel reply

Your email address will not be published. Required fields are marked *

Name * [                              ]

Email * [                              ]

Website [                              ]

        [                                             ]
        [                                             ]
        [                                             ]
        [                                             ]
        [                                             ]
        [                                             ]
        [                                             ]
Comment [                                             ]

 Post Comment

Current ye@r * [3.5                 ]

Leave this field empty [                    ]

[ ] Notify me of follow-up comments by email.

[ ] Notify me of new posts by email.

« How to create a video DVD on Linux desktop
How to fix "fatal error: openssl/aes.h: No such file or directory" »

Enter your email address to subscribe

[                    ] Subscribe
  * xmodulo.com
  * Advertise Here

---------------------------------------------------------------------------------------------------
Search for: [                    ]  Search
SSD virtual servers starting from $5/mon

Related Linux FAQs

How to enable and configure desktop sharing on Linux Mint Cinnamon desktop

How to turn off server signature on Apache web server

How to install and access CentOS remote desktop on VPS

How to configure a Linux bridge with Network Manager on Ubuntu

RSS Xmodulo

  * How to access SQLite database in Perl
  * How to replicate a MySQL database on Linux
  * How to edit your documents collaboratively on Linux
  * Raspberry Pi vs. Raspberry Pi 2 vs. CuBox: performance comparison
  * How to set up a Replica Set on MongoDB
  * How to access a Linux server behind NAT via reverse SSH tunnel
  * How to implement notifications in Android Lollipop
  * How to set up NTP server in CentOS
  * How to implement the FAB (Floating Action Button) in Android apps
  * How to deploy a web application quickly with Ubos on Raspberry Pi

RSS Xmodulo List

  * Web server benchmarking tools for Linux
  * Seahorse
  * BleachBit
  * Unison
  * Nginx
  * noVNC
  * shellinabox
  * wxHexEditor
  * Kdenlive
  * Meld

  * Ask a Question
  * Advertise

Hosted by Stablehost

#+end_example
** DONE MDM-1299: After modifying ssh authorized_keys, ssh still keep asking password: wrong acl for /root/.ssh
  CLOSED: [2015-11-22 Sun 03:36]
http://totvslab.atlassian.net/browse/MDM-1299

Root cause is found: acl of /root/.ssh/ is incorrect. It must be 0700, instead of 0777.

pull request: https://github.com/TOTVS/mdmdevops/pull/5

Verified by testing
- Test app-mdm deployment for MDM-1299-ssh branch: ssh without password shall work
  http://10.165.4.67:48080/job/DockerDeployBasicCookbooks/146/console
- Test app-mdm deployment for dev branch branch: ssh without password shall not work
  http://10.165.4.67:48080/job/DockerDeployBasicCookbooks/147/console
*** useful link
http://unix.stackexchange.com/questions/36540/why-am-i-still-getting-a-password-prompt-with-ssh-with-public-key-authentication
http://askubuntu.com/questions/110814/server-keeps-asking-for-password-after-ive-copied-my-ssh-public-key-to-authoriz
http://serverfault.com/questions/396935/ssh-keys-authentication-keeps-asking-for-password
** DONE ssh tunnel: bind: Cannot assign requested address:  force the ssh client to use ipv4
  CLOSED: [2015-12-02 Wed 22:54]
http://serverfault.com/questions/444295/ssh-tunnel-bind-cannot-assign-requested-address
http://ubuntuforums.org/showthread.php?t=1387297

https://www.clearos.com/clearfoundation/social/community/ssh-port-forwarding-between-clearos-and-remote-server

The close the loop here. The answer, in this case, was to force the ssh client to use ipv4. E.g.

ssh -4 -D 8081 user@8.8.8.8

#+BEGIN_EXAMPLE
root@iZ25y7u44dnZ:~# ssh -i /home/denny/denny -N -p 10040 -f root@123.56.44.213 -L 38080:localhost:28080 -n /bin/bash
bind: Cannot assign requested address
#+END_EXAMPLE
** DONE SSH configurations: HashKnownHosts option
  CLOSED: [2016-01-23 Sat 16:12]
http://linux-audit.com/audit-ssh-configurations-hashknownhosts-option/

Each time the SSH client connects with a server, it will store a
related signature (a key) of the server. This information is stored in
a file names named known_hosts. The known_hosts file itself is
available in the .ssh subdirectory of the related user (on the
client). In the case the signature of the server changes, SSH will
protect the user by notifying about this chance.
** web page: How to set up two-factor authentication for SSH login on Linux - Xmodulo
http://xmodulo.com/two-factor-authentication-ssh-login-linux.html
*** webcontent                                                     :noexport:
#+begin_example
Location: http://xmodulo.com/two-factor-authentication-ssh-login-linux.html
Menu

  * Home
  * About
  * Linux Q & A
  * List
  * Write for Us
  * Advertise
  * Contact

Xmodulo

Linux FAQs, tips and tutorials

[facebook][twitter][googleplus][linkedin][rss-feed]

BGP in Large Networks – [Download eBook]

How to set up two-factor authentication for SSH login on Linux

Last updated on July 7, 2014 Authored by Dan Nanni 10 Comments

With many high-profile password leaks nowadays, there is a lot of buzz in the industry on
"multi-factor" authentication. In a multi-factor authentication system, users are required to go
through two distinct authentication procedures: providing something they know (e.g., username/
password), and leveraging something they have "physical" access to (e.g., one-time passcode
generated by their mobile phone). This scheme is also commonly known as two-factor authentication
or two-step verification.

To encourage the wide adoption of two-factor authentication, Google released Google Authenticator,
an open-source application that can generate one-time passcode based on open standards (e.g., HMAP/
time-based). It is available on multiple platforms including Linux, Android, iOS. Google also
offers a pluggable authentication module (PAM) for Google Authenticator, allowing it to be
integrated with other PAM-enabled applications such as OpenSSH.

In this tutorial, I will describe how to set up two-factor authentication for an SSH server by
integrating Google Authenticator with OpenSSH. I am going to use a Android device to generate
one-time passcode. In this tutorial, you will need two things: (1) a Linux host where OpenSSH
server is running, and (2) an Android device.

Install Google Authenticator on Linux

The first step is to install Google Authenticator on the Linux host where OpenSSH server is
running. Follow this guide to install Google Authenticator and its PAM module on your system.

Once Google Authenticator is ready, you need to go through one-time configuration which involves
creating an authentication key from this Linux host, and registering it with an Android device.
This will be explained next.

Generate an Authentication Key

To start, simply run Google Authenticator on the Linux server host.

$ google-authenticator

You will see a QR code, as well as a secret key underneath it. The displayed QR code simply
represents the numeric secret key. You will need either information to finalize configuration with
an Android device.

 [1457326440]

 [1439001059]

Google Authenticator will ask you several questions. If you are not sure, you an answer "Yes" to
all questions. The emergency scratch codes can be used to regain access to the SSH server in case
you lose your Android device, and so cannot generate one-time passcode. So it's better to write
them down somewhere.

Run Google Authenticator on Android

As we are going to use an Android device for two-factor authentication, you will need to install
Google Authenticator app on Android. Go to Google Play to install it on Android.

When you start Google Authenticator on Android, you will see the following configuration menu.

 [1455409447]

You can choose either "Scan a barcode" or "Enter provided key" option. The first option allows you
to enter the security key, simply by scanning the generated QR code. In this case, you will need to
install Barcode Scanner app first. If you choose the second option, you can type the security key
using Android keyboard as follows.

 [1459672360]

Once you register a secret key either way, you will see the following screen on Android.

 [1439000957]

Enable Google Authenticator on SSH Server

The final step is to integrate Google Authenticator with OpenSSH server. For that, you need to edit
two files.

First, edit a PAM configuration file, and append the line below.

$ sudo vi /etc/pam.d/sshd

auth required pam_google_authenticator.so

Then open an SSH server config file, search for ChallengeResponseAuthentication, and enable it.

$ sudo vi /etc/ssh/sshd_config

ChallengeResponseAuthentication yes

Finally, restart SSH server.

On Ubuntu, Debian or Linux Mint:

$ sudo service ssh restart

On Fedora:

$ sudo systemctl restart sshd

On CentOS or RHEL:

$ sudo service sshd restart

Test Two-factor Authentication

Here is how you use two-factor authentication for SSH logins.

Run Google Authenticator app on Android to obtain one-time verification code. Once generated, a
given passcode is valid for 30 seconds. Once it expires, Google Authenticator will automatically
generate a new one.

 [1438998961]

Now log in to the SSH server as you normally do.

$ ssh user@ssh_server

When you are asked to enter "Verification code", type in the verification code generated by
Android. After successful verification, then you can type in your SSH login password.

  [1438995248]

To conclude, two-factor authentication can be an effective means to secure password authentication
by adding an extra layer of protection. You can use Google Authenticator to secure other logins
such as Google account, WordPress.com, Dropbox.com, Outlook.com, etc. Whether you decide to use it
or not, it's up to you, but there is a clear industry trend towards the adoption of two-factor
authentication.

Download this article as ad-free PDF (made possible by your kind donation):
Download PDF

[rss_small] Subscribe to Xmodulo

Do you want to receive Linux FAQs, detailed tutorials and tips published at Xmodulo? Enter your
email address below, and we will deliver our Linux posts straight to your email box, for free.
Delivery powered by Google Feedburner.

[Your email address  ] Subscribe

[heart_smal] Support Xmodulo

Did you find this tutorial helpful? Then please be generous and support Xmodulo!

The following two tabs change content below.

  * Bio
  * Latest Posts

[wAAACwAA][3a851be8]
My Twitter profileMy Facebook profileMy Google+ profileMy LinkedIn profile

Dan Nanni

Dan Nanni is the founder and also a regular contributor of Xmodulo.com. He is a Linux/FOSS
enthusiast who loves to get his hands dirty with his Linux box. He likes to procrastinate when he
is supposed to be busy and productive. When he is otherwise free, he likes to watch movies and shop
for the coolest gadgets.
[wAAACwAA][3a851be8]
My Twitter profileMy Facebook profileMy Google+ profileMy LinkedIn profile

Latest posts by Dan Nanni (see all)

  * How to set up Apt caching server on Ubuntu or Debian - February 7, 2016
  * How to monitor OpenFlow messages with packet sniffer - February 2, 2016
  * How to search multiple pdf documents for words on Linux - January 13, 2016

  *
  * Tweet
  *
  *
  *

Related FAQs:

  * How to diff remote files over SSH
  * How to edit a remote file over ssh
  * How to access ssh terminal in web browser on Linux
  * How to enable user authentication for a Postfix SMTP server with SASL
  * How to set up Samba as a Primary Domain Controller

Categories: Android, Networking, Security

Tags: authentication, ssh

10 thoughts on "How to set up two-factor authentication for SSH login on Linux"

 1. Reply
    [wAAACwA][5e78e05]Tha-Fox on July 7, 2014 at 9:28 am said:

    Excellent guide! Do you know how much the mobile app will consume battery? I mean is it
    generating those codes backgroud even though I haven't opened the app itself.

      + Reply
        [wAA][3a8]Dan Nanni on July 8, 2014 at 1:37 am said:

        According to my test, when I close Google Authenticator in the foreground, it does not seem
        to run in the background. You can verify that by looking at cached processes in the
        Settings.

 2. Reply
    [wAAACwA][16b1558]GMan on July 7, 2014 at 3:47 pm said:

    I followed these steps and I think I'm missing something because I can cancel out of the
    request for the verification code and just type my login password OR I can type the
    verification code and then my ssh password.
    I'm using Centos 6.5 running OpenSSH_5.3p1, OpenSSL 1.0.1e-fips 11 Feb 2013. I installed
    google-authenticator via yum. I ssh into the box via SSH Secure Shell client from windows but
    I've tried other clients with same results.

      + Reply
        [wAA][3a8]Dan Nanni on July 8, 2014 at 1:40 am said:

        What exactly do you mean by "cancel out of the request for the verification code"? You
        should enter the verification code and SSH password correctly, and only then can you log
        in.

          o Reply
            [wAA][16b]GMan on July 8, 2014 at 2:01 pm said:

            What I mean, and again I must be missing something, is that using the client above I
            got a prompt to put my verification code (expected), I can press the cancel button
            which immediately prompts for my ssh password which then allows me to login no
            problem..completely skipping the verification code... Today it's not even asking me for
            my verification code when I ssh into it from another linbox it just prompts me for my
            ssh password...weird? I've restarted sshd but no change. It feels like it was a one
            time deal as when initially adding the "known hosts" when ssh'ing for the first time.
            Should I reinstall from scratch and report back?

            Thanks!

 3. Reply
    [wAAACwA][112e161]AM on July 10, 2014 at 12:42 pm said:

    I may have missed this point, does do you need to be online to use this system? Or can it be
    run entirely offline (once the software has been installed)?

 4. Reply
    [wAAACwA][bda08a8]SR on August 23, 2014 at 8:06 pm said:

    Thank you for this tutorial.

    I'm afraid I've an issue too as follows:
    Following all steps of the tutorial (double checked everything) I tried to login via ssh and
    got a prompt for my users password as usual what worked fine besides there was no prompt for
    the verification code.

    First of all i decided to put the line "auth required pam_google_authenticator.so" not to the
    end of the file "/etc/pam.d/sshd" but below the other "auth required" lines (last one is "auth
    required pam_env.so envfile=/etc/default/locale" for me).

    Furthermore I reviewed all changes in the configuration an found "usePAM" set to "no" at the
    very and of "/etc/ssh/sshd_config". I changed this to "yes" and now there's a prompt for the
    expected authentication code.

    As a result I now get:
    1. A prompt for the authentication code (expected)
    2. A prompt for "password" (unexpected as I have no idea what password it's supposed to mean,
    see 3.)
    3. A prompt for my user password (expected)

    Apart from the result "Permission denied, please try again." there is another unexpected
    behaviour:
    The prompts 1. and 2. are displayed repeatedly as follows:

    > client:~ myaccount$ ssh 192.168.7.2 -l user1
    > Verification code:
    > Password:
    > Verification code:
    > Password:
    > Verification code:
    > Password:
    > user1@192.168.7.2's password:
    > Permission denied, please try again.
    > user1@192.168.7.2's password:
    > client:~ myaccount$

    I've no idea what's going on here.
    I'd really appreciate your support! Thanks in advance!

      + Reply
        [wAA][0ab]Albert Sebastian on January 13, 2016 at 6:16 am said:

        I think this is an issue with password miss match.
        Please try below steps.
        1. Add a new user and set a password
        2. switch to that user
        3. use keyword google-authenticator for that user
        4. get the url for bar code and scan it in your device
        5.Now you can access the system with ssh to that by using verification code and user
        password we set for that user.

        Enjoy : )

        Thanks for the time.

 5. Reply
    [wAAACwA][b2ef00c]Brian Ernst on September 7, 2014 at 12:10 am said:

    I'm having the same problem as SR above. I am now completely locked out of my system. It keeps
    prompting me. I'm to the point where I get locked out every 6 minutes and can't figure out how
    to get into my system. I've used 2FA on every other site with no problem until I tried to set
    it up myself with your guide.

 6. Reply
    [wAAACwA][0f9c6f5]Robert on October 4, 2014 at 5:43 pm said:

    Nice guide, works as expected for me, no problems at all. However, is it possible to disable
    two-step verification for login-attempts from the internal network ip-range?

Leave a comment Cancel reply

Your email address will not be published. Required fields are marked *

        [                                             ]
        [                                             ]
        [                                             ]
        [                                             ]
        [                                             ]
        [                                             ]
        [                                             ]
Comment [                                             ]

Name * [                              ]

Email * [                              ]

Website [                              ]

 Post Comment

Current ye@r * [4.2                 ]

Leave this field empty [                    ]

[ ] Notify me of follow-up comments by email.

[ ] Notify me of new posts by email.

« What are the alternatives to Skype on Linux
How to use systemd for system administration on Debian »

How to create an HTTP tunnel on Linux with httptunnel

How to scan Linux for vulnerabilities with lynis

How to create an encrypted zip file on Linux

How to encrypt files and directories with eCryptFS on Linux

How to filter, split or merge pcap files on Linux

What is a good alternative to wget or curl on Linux

RSS Ask Xmodulo

  * How to mount qcow2 disk image on Linux
  * How to fix "network 'default' is not active" error in libvirt
  * How to upgrade Docker on Debian or Ubuntu using the official source
  * How to back up and restore file permissions on Linux
  * How to reset the password in an LXC container
  * How to change boot splash screen on Ubuntu or Linux Mint
  * How to add disks to LVM volume on Linux
  * How to install Gparted on Linux
  * How to convert OVA image to QCOW2 format on Linux
  * How to boot into command line on Ubuntu or Debian

RSS Xmodulo List

  * CodeLite
  * OSSEC
  * OpenXenManager
  * MonoDevelop
  * lnav
  * RemoteBox
  * Openswan
  * Florence
  * Firewall Builder
  * Texmaker

SSD virtual servers starting from $5/mon

  * About
  * Advertise
  * Write for Us
  * Contact

Hosted by Stablehost

#+end_example
** DONE [#A] ssh turn off host key checking for all hosts
  CLOSED: [2016-02-14 Sun 10:24]
To turn off host key checking for all hosts you connect to:
~/.ssh/config or /etc/ssh/ssh_config

Host *
    StrictHostKeyChecking no
http://xmodulo.com/how-to-accept-ssh-host-keys-automatically-on-linux.html
** DONE diff remote files over SSH
  CLOSED: [2016-02-14 Sun 11:20]
http://xmodulo.com/how-to-diff-remote-files-over-ssh.html
To diff a local file and a remote file:

$ diff local_file.txt <(ssh user@remote_host 'cat remote_file.txt')
To diff two remote files:

$ diff <(ssh user@remote_host 'cat remote_file.txt') <(ssh user2@remote_host2 'cat remote_file2.txt')
** DONE secure SSH login with one-time passwords on Linux: OTPW
  CLOSED: [2016-02-14 Sun 14:47]
http://xmodulo.com/secure-ssh-login-one-time-passwords-linux.html
OTPW consists of one-time password generator and PAM-integrated verification routines.
** web page: How to access a Linux server behind NAT via reverse SSH tunnel - Xmodulo
http://xmodulo.com/access-linux-server-behind-nat-reverse-ssh-tunnel.html
*** webcontent                                                     :noexport:
#+begin_example
Location: http://xmodulo.com/access-linux-server-behind-nat-reverse-ssh-tunnel.html
Menu

  * Home
  * About
  * Linux Q & A
  * List
  * Write for Us
  * Advertise
  * Contact

Xmodulo

Linux FAQs, tips and tutorials

[facebook][twitter][googleplus][linkedin][rss-feed]

BGP in Large Networks – [Download eBook]

How to access a Linux server behind NAT via reverse SSH tunnel

Last updated on May 4, 2015 Authored by Dan Nanni 12 Comments

You are running a Linux server at home, which is behind a NAT router or restrictive firewall. Now
you want to SSH to the home server while you are away from home. How would you set that up? SSH
port forwarding will certainly be an option. However, port forwarding can become tricky if you are
dealing with multiple nested NAT environment. Besides, it can be interfered with under various
ISP-specific conditions, such as restrictive ISP firewalls which block forwarded ports, or
carrier-grade NAT which shares IPv4 addresses among users.

What is Reverse SSH Tunneling?

One alternative to SSH port forwarding is reverse SSH tunneling. The concept of reverse SSH
tunneling is simple. For this, you will need another host (so-called "relay host") outside your
restrictive home network, which you can connect to via SSH from where you are. You could set up a
relay host using a VPS instance with a public IP address. What you do then is to set up a
persistent SSH tunnel from the server in your home network to the public relay host. With that, you
can connect "back" to the home server from the relay host (which is why it's called a "reverse"
tunnel). As long as the relay host is reachable to you, you can connect to your home server
wherever you are, or however restrictive your NAT or firewall is in your home network.

[wAAACwAAAA][1716264737]

Set up a Reverse SSH Tunnel on Linux

Let's see how we can create and use a reverse SSH tunnel. We assume the following. We will be
setting up a reverse SSH tunnel from homeserver to relayserver, so that we can SSH to homeserver
via relayserver from another computer called clientcomputer. The public IP address of relayserver
is 1.1.1.1.

On homeserver, open an SSH connection to relayserver as follows.

homeserver~$ ssh -fN -R 10022:localhost:22 relayserver_user@1.1.1.1

Here the port 10022 is any arbitrary port number you can choose. Just make sure that this port is
not used by other programs on relayserver.

The "-R 10022:localhost:22" option defines a reverse tunnel. It forwards traffic on port 10022 of
relayserver to port 22 of homeserver.

With "-fN" option, SSH will go right into the background once you successfully authenticate with an
SSH server. This option is useful when you do not want to execute any command on a remote SSH
server, and just want to forward ports, like in our case.

After running the above command, you will be right back to the command prompt of homeserver.

Log in to relayserver, and verify that 127.0.0.1:10022 is bound to sshd. If so, that means a
reverse tunnel is set up correctly.

relayserver~$ sudo netstat -nap | grep 10022

tcp      0    0 127.0.0.1:10022          0.0.0.0:*               LISTEN      8493/sshd

Now from any other computer (e.g., clientcomputer), log in to relayserver. Then access homeserver
as follows.

relayserver~$ ssh -p 10022 homeserver_user@localhost

One thing to take note is that the SSH login/password you type for localhost should be for
homeserver, not for relayserver, since you are logging in to homeserver via the tunnel's local
endpoint. So do not type login/password for relayserver. After successful login, you will be on
homeserver.

Connect Directly to a NATed Server via a Reverse SSH Tunnel

While the above method allows you to reach homeserver behind NAT, you need to log in twice: first
to relayserver, and then to homeserver. This is because the end point of an SSH tunnel on
relayserver is binding to loopback address (127.0.0.1).

But in fact, there is a way to reach NATed homeserver directly with a single login to relayserver.
For this, you will need to let sshd on relayserver forward a port not only from loopback address,
but also from an external host. This is achieved by specifying GatewayPorts option in sshd running
on relayserver.

Open /etc/ssh/sshd_conf of relayserver and add the following line.

relayserver~$ vi /etc/ssh/sshd_conf

GatewayPorts clientspecified

Restart sshd.

Debian-based system:

relayserver~$ sudo /etc/init.d/ssh restart

Red Hat-based system:

relayserver~$ sudo systemctl restart sshd

Now let's initiate a reverse SSH tunnel from homeserver as follows.

homeserver~$ ssh -fN -R 1.1.1.1:10022:localhost:22 relayserver_user@1.1.1.1

Log in to relayserver and confirm with netstat command that a reverse SSH tunnel is established
successfully.

relayserver~$ sudo netstat -nap | grep 10022

tcp      0      0 1.1.1.1:10022     0.0.0.0:*           LISTEN      1538/sshd: dev

Unlike a previous case, the end point of a tunnel is now at 1.1.1.1:10022 (relayserver's public IP
address), not 127.0.0.1:10022. This means that the end point of the tunnel is reachable from an
external host.

Now from any other computer (e.g., clientcomputer), type the following command to gain access to
NATed homeserver.

clientcomputer~$ ssh -p 10022 homeserver_user@1.1.1.1

In the above command, while 1.1.1.1 is the public IP address of relayserver, homeserver_user must
be the user account associated with homeserver. This is because the real host you are logging in to
is homeserver, not relayserver. The latter simply relays your SSH traffic to homeserver.

Set up a Persistent Reverse SSH Tunnel on Linux

Now that you understand how to create a reverse SSH tunnel, let's make the tunnel "persistent", so
that the tunnel is up and running all the time (regardless of temporary network congestion, SSH
timeout, relay host rebooting, etc.). After all, if the tunnel is not always up, you won't be able
to connect to your home server reliably.

For a persistent tunnel, I am going to use a tool called autossh. As the name implies, this program
allows you to automatically restart an SSH session should it breaks for any reason. So it is useful
to keep a reverse SSH tunnel active.

As the first step, let's set up passwordless SSH login from homeserver to relayserver. That way,
autossh can restart a broken reverse SSH tunnel without user's involvement.

Next, install autossh on homeserver where a tunnel is initiated.

From homeserver, run autossh with the following arguments to create a persistent SSH tunnel
destined to relayserver.

homeserver~$ autossh -M 10900 -fN -o "PubkeyAuthentication=yes" -o "StrictHostKeyChecking=false" -o
"PasswordAuthentication=no" -o "ServerAliveInterval 60" -o "ServerAliveCountMax 3" -R
1.1.1.1:10022:localhost:22 relayserver_user@1.1.1.1

The "-M 10900" option specifies a monitoring port on relayserver which will be used to exchange
test data to monitor an SSH session. This port should not be used by any program on relayserver.

The "-fN" option is passed to ssh command, which will let the SSH tunnel run in the background.

The "-o XXXX" options tell ssh to:

  * Use key authentication, not password authentication.
  * Automatically accept (unknown) SSH host keys.
  * Exchange keep-alive messages every 60 seconds.
  * Send up to 3 keep-alive messages without receiving any response back.

The rest of reverse SSH tunneling related options remain the same as before.

If you want an SSH tunnel to be automatically up upon boot, you can add the above autossh command
in /etc/rc.local.

Conclusion

In this post, I talked about how you can use a reverse SSH tunnel to access a Linux server behind a
restrictive firewall or NAT gateway from outside world. While I demonstrated its use case for a
home network via a public VPS, you must be careful when applying it for corporate networks. Such a
tunnel can be considered as a breach of a corporate policy, as it circumvents corporate firewalls
and can expose corporate networks to outside attacks. There is a great chance it can be misused or
abused. So always remember its implication before setting it up.
Download this article as ad-free PDF (made possible by your kind donation):
Download PDF

[rss_small] Subscribe to Xmodulo

Do you want to receive Linux FAQs, detailed tutorials and tips published at Xmodulo? Enter your
email address below, and we will deliver our Linux posts straight to your email box, for free.
Delivery powered by Google Feedburner.

[Your email address  ] Subscribe

[heart_smal] Support Xmodulo

Did you find this tutorial helpful? Then please be generous and support Xmodulo!

The following two tabs change content below.

  * Bio
  * Latest Posts

[wAAACwAA][3a851be8]
My Twitter profileMy Facebook profileMy Google+ profileMy LinkedIn profile

Dan Nanni

Dan Nanni is the founder and also a regular contributor of Xmodulo.com. He is a Linux/FOSS
enthusiast who loves to get his hands dirty with his Linux box. He likes to procrastinate when he
is supposed to be busy and productive. When he is otherwise free, he likes to watch movies and shop
for the coolest gadgets.
[wAAACwAA][3a851be8]
My Twitter profileMy Facebook profileMy Google+ profileMy LinkedIn profile

Latest posts by Dan Nanni (see all)

  * How to set up Apt caching server on Ubuntu or Debian - February 7, 2016
  * How to monitor OpenFlow messages with packet sniffer - February 2, 2016
  * How to search multiple pdf documents for words on Linux - January 13, 2016

  *
  * Tweet
  *
  *
  *

Related FAQs:

  * How to create an HTTP tunnel on Linux with httptunnel
  * How to diff remote files over SSH
  * How to edit a remote file over ssh
  * How to block unwanted IP addresses on Linux efficiently
  * How to secure SSH login with one-time passwords on Linux

Categories: Networking, Security

Tags: firewall, nat, ssh, tunnel

12 thoughts on "How to access a Linux server behind NAT via reverse SSH tunnel"

 1. Reply
    [wAAACwA][c3e04e5]Iulian Murgulet on May 4, 2015 at 11:32 am said:

    When I need to solve this problem (restricted NAT), I will use this:

    - on the vps, I install openvpn with certificates in UDP mode
    - on the remote host and on the internal sever I install openvpn-client (auth with client
    certificate and password)
    - so in the end, you can initiate any ssh connection from remote-host to the internal server
    (using the IP address of the openvpn tunnel)

    Advantages:
    - you have two auth factor (password and certificate) when you want to start openvpn client
    - open-vpn will be a second layer for the ssh communication
    - open-vpn in udp mode is more stealthy compared with ssh on tcp
    - and if you set up the openvpn in bridge mode, you can even use a dedicate VLAN for open-vpn

      + Reply
        [wAA][3a8]Dan Nanni on May 5, 2015 at 1:43 am said:

        Thanks for your comment. VPN can be another option. But I would prefer SSH for ease of
        setup.

        > open-vpn in udp mode is more stealthy compared with ssh on tcp

        I thought the opposite. If a firewall is set to block unrecognized encrypted application
        protocols, it will block OpenVPN. But SSH is whitelisted in many corporate networks.

          o Reply
            [wAA][c3e]Iulian Murgulet on May 5, 2015 at 2:12 pm said:

            I was telling about the ssh installed on the vps, not related with the any corporate
            networks. For example if you scan the vps, it is easy to discover ssh daemon, but to
            discover open-vpn (running on a udp port), you need a lot of time.
            On a corporate network, any ssh traffic is treated with a lot of care/attention, so it
            is hard to cover any ssh link. But if you want very hard to escape, you could use
            openvpn (server side) in TCP mode, running on tcp/443 (with ssl encryption). In this
            case any link to a VPS will be like as any other browsing activity. You could even use
            openvpn with any http/https proxy like any other http/https client.

            And you are right. ssh is easy, but think for a moment there was time in the past when
            all of us discovered a bug in ssl (Heartbleed). At that time any admin who used ssh
            could not sleep very well, until the patch was available! I was running ssh with
            Heartbleed bug for many years!

            But for some others admins (me included), open-vpn (udp/tls-auth, and ssh accessible
            only from the open-vpn tunnel) was very happy, because it was not vulnerable (TLS-auth
            on top of the SSL - see https://openvpn.net/index.php/access-server/heartbleed.html)

            In conclusion, some setups are easy to made, others are more complicated, each of them
            has advantages and disadvantages at the same time.

 2. Reply
    [wAAACwA][ea9886d]Jan Rafaj on May 4, 2015 at 1:46 pm said:

    No need for autossh. There's a simpler way to get the ssh tunnel persistent though - just throw
    the initiating ssh process under init control (put a dedicated 'respawn' record in /etc/
    inittab). The only thing to keep in mind then is to avoid too frequent respawns, which can be
    done by controlling reception of 'icmp host-unreachable', that essentially controls when the
    initiating ssh gives up another tunnel init attempt...

 3. Reply
    [wAAACwA][1d189a7]unnikked on May 4, 2015 at 11:20 pm said:

    Nice and clean article thank you. That could be useful to manage home raspberry without messing
    the home router.

    Can the same trick be used to expose other services? Like a MySQL database for example?

      + Reply
        [wAA][3a8]Dan Nanni on May 5, 2015 at 1:53 am said:

        Sure certainly it can. Simply replace SSH port with MySQL port (3306). Something like will
        do:

        homeserver~$ ssh -fN -R 10022:localhost:3306 relayserver_user@1.1.1.1
        relayserver~$ mysql -h 127.0.0.1 -P 10022 -u user -p db

 4. Reply
    [wAAACwA][88ba0cd]Dashamir Hoxha on May 5, 2015 at 10:06 am said:

    These scripts are based on the same idea and can be used to access the terminal of the home
    server too:
    - https://github.com/docker-build/p2p
    - http://docker-build.github.io/p2p/
    - https://registry.hub.docker.com/u/dashohoxha/p2p/

 5. Reply
    [wAAACwA][aa21038]Mateus Marcuzzo da Rosa on May 6, 2015 at 1:03 pm said:

    Excellent.

    I've been searching for something close like that so I can access services that come out of my
    home network, which is NATed.

    At least for SSH now I know how to do it.
    I'd like to know if it's possible for an arbitrary service on another port (like VPN port) and
    how can I do it.

    I don't master very well using VPNs and stuff...(I've read the above comments too)

    Thanks for the article.

 6. Reply
    [wAAACwA][f5dd9bc]Fernando Vieira on July 15, 2015 at 5:46 pm said:

    Thank you so much!

    This is what I call flawless instructions!

 7. Reply
    [wAAACwA][e81abfe]Jeremy weber on August 27, 2015 at 2:25 pm said:

    Hi, thank you a lot for these explanations.
    I would like to make sure about one thing. If I have multiple homeservers at different places
    but all are behind NAT. Can we access them all from one single vps? Is it sufficient to create
    each ssh connection to a specific port on the relay server (10022 for homeserver 1, 10023 for
    homeserver 2, etc)
    Thank you for your response.
    Weber Jerem

      + Reply
        [wAA][3a8]Dan Nanni on August 27, 2015 at 3:03 pm said:

        Definitely. Just make sure to use different ports on the relay VPS for different home
        servers.

          o Reply
            [wAA][e81]Jeremy Weber on August 27, 2015 at 3:34 pm said:

            Ok thank you. Very nice tutorial BTW :)

Leave a comment Cancel reply

Your email address will not be published. Required fields are marked *

        [                                             ]
        [                                             ]
        [                                             ]
        [                                             ]
        [                                             ]
        [                                             ]
        [                                             ]
Comment [                                             ]

Name * [                              ]

Email * [                              ]

Website [                              ]

 Post Comment

Current ye@r * [4.2                 ]

Leave this field empty [                    ]

[ ] Notify me of follow-up comments by email.

[ ] Notify me of new posts by email.

« How to implement notifications in Android Lollipop
How to set up a Replica Set on MongoDB »

Linux FAQ categories

  * Amazon AWS
  * Android
  * Arch Linux
  * Audio
  * Business
  * CentOS
  * Chromium OS
  * Cisco
  * Cloud Services
  * CloudStack
  * Databases
  * Debian
  * Desktop
  * Development
  * Editors
  * Fedora
  * Filesystem
  * Games
  * Google
  * Graphics
  * Hadoop
  * Hardware
  * Java
  * Kernel
  * KVM
  * Lightweight Linux
  * Linux Mint
  * Math
  * Networking
  * Open vSwitch
  * OpenStack
  * OpenWRT
  * Perl
  * PHP
  * Productivity
  * Publishing
  * Python
  * Raspberry Pi
  * Security
  * Shells
  * System
  * System Administration
  * Ubuntu
  * Utilities
  * Video
  * VirtualBox
  * Virtualization
  * VMware
  * Vyatta
  * Web
  * Windows Azure
  * Xen
  * XenServer

Subscribe to daily Linux FAQ tips

[Enter your email add] Subscribe
  * SSD virtual server for $5/monSSD virtual server for $5/mon
  * [wAAACwAAAA][vultr]

  * Advertise Here

---------------------------------------------------------------------------------------------------
Search for: [                    ]  Search
Related Linux FAQs

How to enable ssh access on Vyatta router

How to disable auto refresh on SmokePing

How to scan Linux for rootkits with rkhunter

How to set up web-based network traffic monitoring system on Linux

How to turn your CentOS box into an OSPF router using Quagga

How to set up networking between Docker containers

RSS Ask Xmodulo

  * How to mount qcow2 disk image on Linux
  * How to fix "network 'default' is not active" error in libvirt
  * How to upgrade Docker on Debian or Ubuntu using the official source
  * How to back up and restore file permissions on Linux
  * How to reset the password in an LXC container
  * How to change boot splash screen on Ubuntu or Linux Mint
  * How to add disks to LVM volume on Linux
  * How to install Gparted on Linux
  * How to convert OVA image to QCOW2 format on Linux
  * How to boot into command line on Ubuntu or Debian

RSS Xmodulo List

  * CodeLite
  * OSSEC
  * OpenXenManager
  * MonoDevelop
  * lnav
  * RemoteBox
  * Openswan
  * Florence
  * Firewall Builder
  * Texmaker

SSD virtual servers starting from $5/mon

  * About
  * Advertise
  * Write for Us
  * Contact

Hosted by Stablehost

#+end_example
** TODO [#A] ssh performance tunning                              :IMPORTANT:
echo "UseDNS no" >> /etc/ssh/sshd_config

echo "ClientAliveInterval 30" >> /etc/ssh/sshd_config
*** [#A] web page: [原]sshd服务取消DNS反向解析及修改超时时间 - linuxの飘扬 - Power by <nobr>www.linuxfly.org</nobr>
http://www.linuxfly.org/post/245/
**** webcontent                                                    :noexport:
#+begin_example
Location: http://www.linuxfly.org/post/245/
  * 首页
  * RSS
  * 登入
  * 注册
  * 标签
  * 留言
  * 链接
  * 边栏
  * 星标日志

[toolbar_pr]解决打开word2003错误提示
[toolbar_ne][原]通过OpenSSH传输客户端的环境变量
Sep 13

[原]sshd服务取消DNS反向解析及修改超时时间 [unstarred] 晴

linuxing, 19:55, 基础知识 » 故障处理, 评论(0), 引用(0), 阅读(14032), Via 本站原创
[toolbar_fo] 大 | 中 | 小 [toolbar_rs]
引用功能被关闭了.
   两个有关sshd服务的常见问题:
一`取消DNS反向解析
   使用的Linux用户可能觉得用SSH登陆时为什么反映这么慢,有的可能要几十秒才能登陆进系统.其实这是由于
默认sshd服务开启了DNS反向解析,如果你的sshd没有使用域名等来作为限定时,可以取消此功能.

# vi /etc/ssh/sshd_config

找到选项
引用
#UseDNS yes

修改为
引用
UseDNS no

重启sshd 服务

# service sshd restart

二`修改超时时间
在Asinanux 3.0带4.3sp2版本OpenSSH,默认超时连接时间比较短,这是出于安全的考虑,但对于需要长时间使用
的用户来说很麻烦,每次都要重新连接.我们可以修改其设定参数:
# vi /etc/ssh/sshd_config

找到选项
引用
#ClientAliveInterval 0

修改为
引用
ClientAliveInterval 10

重启sshd 服务

# service sshd restart

这样,超过10秒没有动作的情况下,sshd服务才会中断连接.
相关日志
[转]ssh 域名解析登录延迟问题
Tags: sshd

发表评论

表情                  昵称 [            ]  密码 [            ]  游客无需密码
emotemotemotemotemot  网址 [            ]  电邮 [            ]  [注册]
emotemotemotemotemot  [bar]  [bold]  [italic]  [underline]  [bar]  [insertimag]  [url]  [email]
emotemotemotemotemot  [quote]
emotemotemotemotemot  [                                            ]
emotemotemotemotemot  [                                            ]
[ ] 打开HTML          [                                            ]
[*] 打开UBB           [                                            ]
[*] 打开表情          [                                            ]
[ ] 隐藏              [                                            ]
[ ] 记住我            [                                            ]
                      [                                            ]
                      [                                            ]
                      [                                            ]
                      提交     重置

日历

< 2016 >    < 4 >
丙申年（猴）
日            一            二            三            四            五            六
                                                                      1             2
3             4             5             6             7             8             9
10            11            12            13            14            15            16
17            18            19            20            21            22            23
24            25            26            27            28            29            30

分类

  * 基础知识 [0] RSS
  * 系统命令 [44] RSS
  * 性能评估 [11] RSS
  * 故障处理 [49] RSS
  * 硬件处理 [35] RSS
  * RPM [20] RSS
  * 网络服务 [0] RSS
  * OpenStack [9] RSS
  * HA [24] RSS
  * 虚拟机 [35] RSS
  * 邮件系统 [16] RSS
  * 远程管理 [14] RSS
  * 安全相关 [40] RSS
  * 性能监控 [8] RSS
  * 常见服务 [52] RSS
  * 商业软件 [6] RSS
  * 数据库 [0] RSS
  * Oracle [19] RSS
  * Mysql [7] RSS
  * 编程 [0] RSS
  * Android [1] RSS
  * ASP [4] RSS
  * Bash [13] RSS
  * C/C++ [2] RSS
  * CSS [2] RSS
  * Java [8] RSS
  * JavaScript [34] RSS
  * Perl [32] RSS
  * Php [21] RSS
  * Python [7] RSS
  * (X)HTML [13] RSS
  * 示例 [13] RSS
  * 其他 [0] RSS
  * 杂七杂八 [74] RSS
  * 闲聊 [98] RSS
  * Ebook [4] RSS
  * Gentoo [2] RSS

广告

搜索

[                    ] [日志标题]  搜索
统计

访问次数 6344007
今日访问 2069
日志数量 713
评论数量 526
引用数量 1
留言数量 86
注册用户 788
在线人数 71

全局搜索

最新日志

  * 从 ext4 磁盘中恢复...
  * [原]在Windows ...
  * [原]执行nova mi...
  * [原]解决 OpenvS...
  * [原]解决CentOS ...

综合点击排行

  * [203065][原]红帽 Re...
  * [184147]宋韶光2009年...
  * [134613][原]使用php...
  * [102378]推荐一款基于云存...
  * [101913][原]EMOS ...

随机日志

  * [原]创建ESXi 3 ...
  * [原]PHP变量使用大括...
  * [原]在红旗DC 4.1...
  * 电脑通过乐Phone（3...
  * [原]使用Vtonf管理...

最新评论

  * 这个真的很方便.非常感谢...
  * 难得一见的好文,作者真的...
  * 老大有6.8的程序吗
  * 你好:想請問你這篇文章的...
  * 你好:想請問你這篇文章的...

归档

  * 2016/04
  * 2016/03
  * 2016/02
  * 2016/01
  * 2015/12

其他

登入
注册
申请链接
RSS:日志 | 评论
编码:UTF-8
XHTML 1.0

链接

  * 默认链接组
  * 园软门户
  * cnBeta.com
  * 登陆日志
  * Google Bookmarks
  * 香港格價網
  * 参考资料
  * Mozilla Developer Network
  * PHP Manual
  * CakePHP手册
  * jQuery API
  * Interpreted Languages
  * 技术网站
  * 免费资源网络社群
  * HowtoForge
  * IT运维专家论坛
  * 回忆未来[张宴]
  * DBA notes
  * FreeBSD China
  * idv2.com
  * 疯狂老头 BLOG
  * LinuxMail.Info
  * Nixcraft
  * Alibaba DBA Team
  * 彬Go
  * Fwolf's Blog
  * 友情链接
  * 红旗漫卷
  * Exceeder
  * 爱百科
  * badb0y's blog
  * 鸭嘴的博客
  * 博爱老头的草屋
  * Selboo's Blog
  * 枫叶集
  * 扶凯
  * 康盛博客
  * 皮皮书屋
  * meridian
  * wxd5981

Copyright © 2005-2008 迷·拾壹月 All rights reserved. | Template By Eiker | Powered by Bo-Blog 2.1.1
ReleaseCode detection by Bug.Center.Team
粤ICP备09022853号
Run in 39 ms, 11 Queries, Gzip enabled.

#+end_example
** DONE fail2ban: protect SSH server from brute force attacks
   CLOSED: [2016-05-12 Thu 06:50]
https://www.digitalocean.com/community/tutorials/how-to-protect-ssh-with-fail2ban-on-ubuntu-14-04
http://xmodulo.com/how-to-protect-ssh-server-from-brute-force-attacks-using-fail2ban.html
** [#A] autossh configuration                                     :IMPORTANT:
https://www.everythingcli.org/ssh-tunnelling-for-fun-and-profit-autossh/
https://linuxaria.com/howto/permanent-ssh-tunnels-with-autossh

vim /etc/ssh/sshd_config
GatewayPorts yes

# reverse tunnel
autossh -M 29996 -i /home/denny/test -fN -o "PubkeyAuthentication=yes" -o "StrictHostKeyChecking=false" -o "PasswordAuthentication=no" -o "ServerAliveInterval 60" -o "ServerAliveCountMax 3" -R 54.179.178.214:29995:localhost:22 root@54.179.178.214

ssh -i /home/denny/test -fN -o "PubkeyAuthentication=yes" -o "StrictHostKeyChecking=false" -o "PasswordAuthentication=no" -o "ServerAliveInterval 60" -o "ServerAliveCountMax 3" -R 54.179.178.214:29995:localhost:22 root@54.179.178.214

# ssh tunnel
ssh -i /home/denny/test1 -4 -N -p 19995 -f root@123.57.240.189 -L *:48080:localhost:48080 -n /bin/bash

autossh -M 48081 -4 -p 19995 -i /home/denny/test1 -fN -o "PubkeyAuthentication=yes" -o "StrictHostKeyChecking=false" -o "PasswordAuthentication=no" -o "ServerAliveInterval 60" -o "ServerAliveCountMax 3" -L  123.57.240.189:48080:localhost:48080 root@123.57.240.189
*** web page: Aptible Blog Archives - Reverse SSH tunneling with AWS
http://aptible-archives.tumblr.com/post/56897638120/reverse-ssh-tunneling-with-aws
**** webcontent                                                    :noexport:
#+begin_example
Location: http://aptible-archives.tumblr.com/post/56897638120/reverse-ssh-tunneling-with-aws
[web-horizo]

Aptible Blog Archives

This is an archive of posts from 2013, before we moved the main Aptible blog to a shared account.

You can visit us at our main site or the current blog.

Feel free to call us at (866) 296-5003 if you have questions about HIPAA.
This is an archive of posts from 2013, before we moved the main Aptible blog to a shared account.

You can visit us at our main site or the current blog.

Feel free to call us at (866) 296-5003 if you have questions about HIPAA.

  * rss
  * archive

  * Reverse SSH tunneling with AWS

    I mostly blog about healthcare here, but I wanted to put up a quick tutorial on reverse
    tunneling for developers. There are plenty of explanations out there, but I wanted to write one
    that is simple, easy to understand, and repeatable.

    What is reverse tunneling, and why is it useful for web developers?

    SSH, or Secure Shell, is a cryptographic network protocol that allows us to set up secure
    connections between computers over an unsecure network, like the Internet. We can use it to run
    commands, forward ports, and transfer files. We can also use it to create a secure "tunnel" by
    wrapping unencrypted protocols (such as HTTP) in encryption.

    Normal tunneling forwards a port on a local machine to a port on a remote machine. Reverse
    tunneling forwards a port on a remote machine to a port on a local machine.

    This is useful because it allows us to direct third-party services and devices to a remote
    machine that is exposed to the Internet. Those requests will then be forwarded to our local
    machine. It's faster than deploying to a staging server.

    I use it mostly to check how my iPhone and iPad are displaying CSS media queries, in addition
    to the Safari Developer tools.

    How to set up a reverse tunnel

    First off, you don't have to DIY. You can use Localtunnel or Forward for this. I like setting
    up my own because it's easy, responsive, and gives me a lot of control.

    How easy is it? There are four steps:

     1. Start a server, configured to allow reverse ssh tunneling
     2. Configure our local ssh settings
     3. ?
     4. PROFIT

    Ok, the real steps:

     1. Configure and start a server
     2. Configure our local ssh settings
     3. Configure server ssh settings and reload ssh config
     4. Establish the reverse tunnel

    I'm using OS X Terminal, OpenSSH and Amazon Web Services.

    Step 1: Configure and Start a Server

    We are going to launch an EC2 instance using the AWS Management Console interface. Go into the
    EC2 Mangement Console, go under Instances, and hit the "Launch Instance" button. You should see
    the Quick Launch Wizard:

    image

      + Name your instance
      + You may need to create and download a keypair
      + I like Ubuntu Server 12.04.2 LTS

    Hit "Continue." Next, let's edit the instance details.

    image

    I just use a t1.micro. If you want something beefier, select it under the Instance Details
    radio button.

    Under Security Settings:

    image

      + Create a new Security Group
      + Call it something like "Reverse SSH Tunnel", add a description
      + Add a rule to allow access on port 22 (SSH) at source 0.0.0.0/0
      + Add another rule to allow access on port 3000 (or whatever port you want to forward traffic
        from) at source 0.0.0.0/0
      + Create the Security Group
      + Select that group and hit Save Details
      + Launch the instance

    Note that you can also launch an instance and edit the Security Group afterwards. The process
    is similar.

    Optional: Assign an Elastic IP

    When your instance launches, you will see it is assigned a default IP address, something like
    ec2-54-211-63-58.compute-1.amazonaws.com. To make that a little more manageable, and to persist
    an IP across starting/stopping an instance, let's assign an Elastic IP.

     1. Under Network & Security, go to Elastic IPs
     2. Allocate a New Address, in EC2
     3. Associate the Address with your instance

    Now when you select your instance, you should see something like this, with a nice static IP:

    image

    Step 2: Configure Local SSH Settings

    Find the *.pem key you downloaded and copy it to your ~/.ssh folder. For me this was:

    $ mv ~/Downloads/reverse-ssh-key.pem ~/.ssh

    AWS requires us to set the permissions on our key so that only the owner may read it.

    $ chmod 600 ~/.ssh/reverse-ssh-key.pem

    To avoid having to pass in a long set of parameters every time we want to open the tunnel, we
    can edit the ~/.ssh/config file to include:

    host 54.227.245.213
        user ubuntu
        StrictHostKeyChecking no
        UserKnownHostsFile /dev/null
        CheckHostIP no
        IdentityFile ~/.ssh/reverse-ssh-key.pem
        ServerAliveInterval 120

    Hit $ man ssh_config to read about these options.

      + Host is the IP address of the instance we fired up.
      + User should be whatever your OS prefers. If you use Amazon's Linux AMI, it will want you to
        log in as "ec2-user." Ubuntu will let you start a console as root, but will want you to be
        a normal user for other tasks.
      + Several options have to do with checking/managing keys. I'm ok here because we are just
        connecting to a specified IP. If you wanted to be paranoid then...you shouldn't be following
        this tutorial.
      + ServerAliveInterval pings the remote host every n seconds, to keep the connection alive.
        Not setting it will eventually result in a "Write failed: Broken pipe" error.

    Save and open a new shell window to load the new config.

    Step 3: Configure Server SSH Settings and Reload SSH Config

    Check that you can ssh into your server now:

    $ ssh 54.227.245.213

    image

    Awesome.

    Finally, we have to configure the port binding on the instance. Get into the sshd_config file
    with write access and add "GatewayPorts yes".

    ubuntu@ip-10-147-225-211:~$ sudo vim /etc/ssh/sshd_config

    image

    (In vim, arrow scroll to where you want to insert, hit "i" to insert, esc to end the insert,
    ":w" to save, ":q" to quit.)

    If you need to not bind everything on the wildcard, you can set GatewayPorts to other things.
    ($ man ssh and $ man sshd_config it.)

    Finally, reload the ssh configuration and exit the session:

    ubuntu@ip-10-147-225-211:~$ sudo reload ssh
    ubuntu@ip-10-147-225-211:~$ exit

    Step 4: Establish the Reverse Tunnel

    Now it's time for magic. Fire up a local server. I'm using port 3000. The syntax for reverse
    tunneling is:

    $ ssh -R [bind_address:]port:host:hostport address

    With GatewayPorts set to "yes" on the server, we can leave out the bind_address. So:

    $ ssh -R 3000:localhost:3000 54.227.245.213

    means that port 3000 on the remote server is to be forwarded to the given host and port on the
    local side. Remember, if you want to use a different remote port, you need to allow access in
    your EC2 Security Group settings.

    You should be able to point a web browser at the specified port on your server
    (54.227.245.213:3000 here) and interact with your development environment.

    Optional: Add an Alias

    The last thing I'm going to do is add an alias in my ~/.bashrc file:

    alias devtunnel="ssh -NR 3000:localhost:3000 54.227.245.213"

    -N runs the ssh session without executing a remote command. You can also run it with -f to send
    it to background.

    Now, after I open a new shell window, I can start a new tunnel with:

    $ devtunnel

    That's it. Enjoy.

      +
          o
          o
      + July 30, 2013 (3:20 pm)
      + #reverse tunnel
      + #ssh
      + #aws

© 2013–2016 Aptible Blog Archives [impixu][impixu]

#+end_example
** DONE remote port forwarding failed for listen port
  CLOSED: [2016-05-21 Sat 07:32]
http://bbrinck.com/post/2318562750/reverse-ssh-tunneling-easier-than-port
http://serverfault.com/questions/595323/ssh-remote-port-forwarding-failed
#+BEGIN_EXAMPLE
Note: Sometimes, when a SSH connection dies (as it will if you shut your laptop to move to another location), the port on the remote machine will stay open. If this happens, you'll see this error when you try to create the reverse tunnel:

Warning: remote port forwarding failed for listen port 3000

If this happens, you can either use a new port or do the following:

Find the process that is using port 3000 (look for the PID - you'll need to run the command with sudo to see the PIDs):
sudo netstat -anp
Kill the stale process:
kill PID
#+END_EXAMPLE
** DONE [#A] Disable SSH Host Key Checking
  CLOSED: [2016-09-02 Fri 22:38]
http://www.shellhacks.com/en/HowTo-Disable-SSH-Host-Key-Checking

ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no peter@192.168.0.100

/etc/ssh/ssh_config
Host *
   StrictHostKeyChecking no
   UserKnownHostsFile=/dev/null

mac /etc/ssh_config
** SSHLoginReport
ls /var/log/auth.log

echo "PasswordAuthentication no" >> /etc/ssh/sshd_config

| Name                    | Command                                                      |
|-------------------------+--------------------------------------------------------------|
| ssh down                | grep -R "ssh.*Received signal 15" .                          |
| ssh up                  | grep -R "sshd.*Server listening" .                           |
|-------------------------+--------------------------------------------------------------|
| ssh failed login        | grep -R "sshd.*Failed password for invalid user" .           |
| ssh break-in attemp     | grep -R "sshd.*POSSIBLE BREAK-IN ATTEMPT!" .                 |
| ssh port scap           | grep -R "sshd.*Bad protocol version identification" .        |
|-------------------------+--------------------------------------------------------------|
| ssh login by public key | grep -R "sshd.*Accepted publickey for" .                     |
| ssh login by password   | grep -R "sshd.*Accepted password for" .                      |
| ssh logout event        | grep -R "sshd.*pam_unix(sshd:session): session closed for" . |
*** [#A] ssh event by one thread
#+BEGIN_EXAMPLE
21:50:53 root@denny-server:/home/denny# grep -R "sshd\[25866\].*" . | tail
./auth.log.3:Apr 24 06:13:39 denny-server sshd[25866]: Accepted publickey for root from 171.221.146.135 port 26242 ssh2: RSA 92:ac:43:1f:5e:8a:f1:1c:a4:af:55:0e:28:03:5a:e4
./auth.log.3:Apr 24 06:13:39 denny-server sshd[25866]: pam_unix(sshd:session): session opened for user root by (uid=0)
./auth.log.3:Apr 24 06:13:39 denny-server sshd[25866]: error: bind: Address already in use
./auth.log.3:Apr 24 06:13:39 denny-server sshd[25866]: error: channel_setup_fwd_listener: cannot listen to port: 40000
./auth.log.3:Apr 24 06:23:54 denny-server sshd[25866]: Received disconnect from 171.221.146.135: 11: disconnected by user
./auth.log.3:Apr 24 06:23:54 denny-server sshd[25866]: pam_unix(sshd:session): session closed for user root
#+END_EXAMPLE
*** ssh login by public key: Accepted publickey for
May 12 02:24:35 denny-server sshd[24081]: Accepted publickey for root from 175.11.114.199 port 37819 ssh2: RSA 70:d1:90:83:99:d3:5a:2d:fa:63:36:e0:b6:fa:a9:36
*** ssh login by username
May 13 17:03:54 denny-server sshd[29980]: Accepted password for denny from ::1 port 60608 ssh2
May 13 17:03:54 denny-server sshd[29980]: pam_unix(sshd:session): session opened for user denny by (uid=0)
May 13 17:04:19 denny-server sshd[29980]: pam_unix(sshd:session): session closed for user denny
*** #  --8<-------------------------- separator ------------------------>8--
*** ssh server down: Received signal 15
May 12 09:11:31 denny-server sshd[985]: Received signal 15; terminating.
*** ssh server start: Server listening on 0.0.0.0 port 22.
May 12 09:11:31 denny-server sshd[8164]: Server listening on 0.0.0.0 port 22.
May 12 09:11:31 denny-server sshd[8164]: Server listening on :: port 22.
May 12 09:11:36 denny-server sshd[8166]: Connection closed by 123.57.240.189 [preauth]
*** security issue: failed - POSSIBLE BREAK-IN ATTEMPT!
May 11 21:58:01 denny-server sshd[3016]: reverse mapping checking getaddrinfo for host108-212-36-89.static.arubacloud.fr [89.36.212.108] failed - POSSIBLE BREAK-IN ATTEMPT!
*** port scap for ssh: Bad protocol version identification
May 12 05:00:08 denny-server sshd[4170]: Bad protocol version identification '' from 171.13.14.44 port 13808
May 12 05:13:51 denny-server sshd[19886]: Bad protocol version identification '' from 171.13.14.55 port 19357
May 12 05:43:31 denny-server sshd[516]: Did not receive identification string from 149.91.80.21
May 12 05:44:58 denny-server sshd[1746]: Did not receive identification string from 92.222.80.116
*** ssh connection reset: fatal: Read from socket failed: Connection reset by peer
May 12 05:42:08 denny-server sshd[32045]: fatal: Read from socket failed: Connection reset by peer [preauth]
*** DONE invalid user ssh attempt: Failed password for invalid user ftpuser from
   CLOSED: [2016-05-12 Thu 21:26]
#+BEGIN_EXAMPLE
root@denny-server:/var/log# tail -n 10000 ./auth.log | grep "Invalid user" | tail -n 100
<ar/log# tail -n 10000 ./auth.log | grep "Invalid user" | tail -n 100
May 12 05:49:14 denny-server sshd[9524]: Invalid user test from 125.212.232.68
May 12 05:49:30 denny-server sshd[9920]: Invalid user admin from 125.212.232.68
...
...
May 12 08:32:56 denny-server sshd[7239]: Invalid user solr from 121.31.114.174
May 12 08:39:39 denny-server sshd[7244]: Invalid user solr from 121.31.114.174
May 12 08:48:46 denny-server sshd[7825]: Invalid user nexus from 121.31.114.174
May 12 08:57:55 denny-server sshd[7959]: Invalid user hadoop from 121.31.114.174
#+END_EXAMPLE
*** ssh logout event or failed close event
May 12 08:57:57 denny-server sshd[7959]: Received disconnect from 121.31.114.174: 11: Bye Bye [preauth]
** DONE create a banner/welcome-note for SSH server: /etc/ssh/sshd_config: Banner file
   CLOSED: [2016-09-23 Fri 00:26]
https://crybit.com/create-a-banner-ssh-server/

[root@localhost ~]# vim /etc/ssh/sshd_config
-----
#Banner none
Banner /etc/ssh/welcome.txt

vim /etc/ssh/welcome.txt
** TODO [#A] ssh tunnel
http://superuser.com/questions/96489/an-ssh-tunnel-via-multiple-hops

http://blog.trackets.com/2014/05/17/ssh-tunnel-local-and-remote-port-forwarding-explained-with-examples.html

You basically have three possibilities:

Tunnel from localhost to host1:

ssh -L 9999:host2:1234 -N host1
As noted above, the connection from host1 to host2 will not be secured.
Tunnel from localhost to host1 and from host1 to host2:

ssh -L 9999:localhost:9999 host1 ssh -L 9999:localhost:1234 -N host2
This will open a tunnel from localhost to host1 and another tunnel from host1 to host2. However the port 9999 to host2:1234 can be used by anyone on host1. This may or may not be a problem.
Tunnel from localhost to host1 and from localhost to host2:

ssh -L 9998:host2:22 -N host1
ssh -L 9999:localhost:1234 -N -p 9998 localhost
This will open a tunnel from localhost to host1 through which the SSH service on host2 can be used. Then a second tunnel is opened from localhost to host2 through the first tunnel.
*** web page: How to do SSH Tunneling (Port Forwarding) - Screen-cast - Ramki Blog
http://www.ramkitech.com/2012/04/how-to-do-ssh-tunneling-port-forwarding.html
**** webcontent                                                    :noexport:
#+begin_example
Location: http://www.ramkitech.com/2012/04/how-to-do-ssh-tunneling-port-forwarding.html
  * About
  * Sitemap
  * Contact
  * My Resume
  *
  *
  *

MENU

Ramki Blog

#
Menu

  * Home
  * Tomcat Clustering
      + Part 5
      + Part 4
      + Part 3
      + Part 2
      + Part 1
  * IoT
  * Android
  * Hadoop

[Search...           ]   

#
Ramki Blog Linux screencast SSH SSH Tunneling How to do SSH Tunneling (Port Forwarding) -
Screen-cast

How to do SSH Tunneling (Port Forwarding) - Screen-cast

Rama krishnnan EP Saturday, April 28, 2012 #
Rama krishnnan EP
In this post we will see how ssh works?, what is SSH tunneling? what is important of ssh tunnels
and how to setup the ssh tunnel.
When SSH server is installed in machine then by default its allowed ssh tunneling.

SSH Tunneling (Port Forwarding)
Tunneling is the concept to encapsulate the network protocol to another protocol. here we put into
SSH. so all network communication are encrypted. It also called Port Forwarding. because in ssh
tunneling we are going to bind one local port. so what are the packet we are going to send that
particular port, all packets are transparently encrypt and delivered to remote system.

What is the need for SSH Tunneling?

     SSH is enough to administrate the remote system. its not enough to access the all services
which are available in remote system.
let i describe in the following scenario,
[scenario]

now lets consider the scenario, System (192.168.56.101) is my system its connected to internet and
server its called PrivateServer (192.168.56.102)  machine have two Ethernet interfaces. one is
connected to Internet. and another is connected to 10.10.1.0/24 local network. Intranet
(10.10.1.11) machine is part of 10.10.1.0/24  sub network.

Note : here i mentioned local system(192.168.56.101) and remote system(192.168.56.102) are looking
like local sub-net IP address. For VM purpose i used these IP address. But reality is it should be
any public IP address.

Important Note : SSH Server daemon service is running in port 22 in all these three system and
firewall is allowed to connect these system using SSH client.

now System (192.168.56.101) can communicate to PrivateServer (192.168.56.102), because both system
are connected to internet directly. But System (192.168.56.101) can't communicate to Intranet
(10.10.1.11) machine, because from System (192.168.56.101) perspective 10.10.1.11 is non route
able IP address. 10.10.1.11 is not public IP address, its local IP address. so we can't route the
packets directly.

Now the situation like that from System(192.168.56.101) i want to access the Intranet (10.10.1.11)
machine. without modifying IP tables, redirect, like tools/services in intermediate (or) target
machine. Because i m not sys-admin, so i don't have root privilege.

One of the possible solution is first use ssh to log in into PrivateServer(192.168.56.102) and then
again (nested) log in  to Intranet(10.10.1.11). Yes its good idea, its works, now i can
remotely administrate the Intranet(10.10.1.11). but if Intranet(10.10.1.11) offer some services
like VNC, Apache httpd, smtp, pop3, squid proxy then how we can access these services from System
(192.168.56.101)?

here its not strictly Intranet(10.10.1.11) offer these service, it may be 10.10.1.0/24 sub net any
one of the machine can offer these services. Even in 10.10.1.0/24 sub-net have one
intranet-website. how we can access these site from System(192.168.56.101) machine Firefox?

The solution is SSH Tunneling or SSH Port Forwarding

How SSH Works

            In terminal when we type ssh ramki@Private-Server.org  then terminal application invoke
the ssh client, ssh client connect to Private-Server.org's SSH server in port 22. then both client
and server exchange the identity,  public keys, cipher suite information and create one shell
process in server side. then secure channel is established between client and server. then future
all commands from 192.168.101 are go through this secure channel to server (192.168.56.102) and
execute the command and the response are come back in same secure channel.

For example after establish ssh, i will issue the ls command. the ls command goes to SSH client
then that command encapsulate and encrypted then send to server. Server decrypt and extract the
command and execute the command in shell (which is created when ssh is established), the output of
ls command is not printed in shell. Its redirect the output to SSH client in same secure channel
and follow the same procedure (encapsulate and encrypt) . and finally Terminal application shows
the output of ls command.

I think here all command is encoded to Base64 encoding before send to server and before encrypt.
(But i am not sure)

here very important note that SSH is not disturb  the port other than 22 (or which port ssh server
is running).

[ssh_works]

SSH Tunneling
      SSH can work many channel's simultaneously. In normal case we use shell channel. But now we
are going to use data channel. so base concept is, in 192.168.56.101 machine ssh client bind one
port and establish secure connection with server (192.168.56.102). and create one data channel and
shell channel. (we can omit shell channel using -N option in ssh command).

Now In system machine ( 192.168.56.101) any application send data to that port (which one ssh
client is bind), then ssh client transparently receive the data and encrypt and sent to server
machine. In server  ( 192.168.56.102) receive and decrypt it and make the local call. (we discuss
later)

SSH Tunneling types
SSH offers three types of tunneling

  * Dynamic Tunneling (SOCKS Proxy)
  * Local Port Forwarding
  * Remote Port Forwarding

Dynamic Tunneling

   Command :            ssh     -D 8080     ramki@192.168.56.102

here -D 8080 is mention SOCKS v5 Proxy bind 8080 port in client side

         Now ssh client in 192.168.56.101 machine create one SOCKS proxy server in client side and
bind one local port.then connect to 192.168.56.102 remote machine and establish secure channel.

 Now all client application like Firefox, chrome,... need to configure the proxy setting  to SOCKS
proxy server localhost and port number. (check video for reference below the post)

Note : consider server (192.168.56.102) and Intranet (10.10.1.11) both machines run Apache httpd
server and bind port 80

After configuration is completes,
in Firefox now type http://localhost/, we know that in client machine (192.168.56.101) there is no
service is running in port 80. but when we hit enter in browser, we can see the website of server
machine (192.168.56.102).

How we can access server website using http://localhost/ in client machine?
we configure the proxy in browser. so browser send all HTTP request (even localhost anf 127.0.0.1)
to port 8080, here SOCKS proxy is running in that port. Then socks proxy server packs our HTTP
request to ssh client and encrypt and send to server. Server decrypt and extract the HTTP Request.
Now in server side the HTTP request http://localhost/ is point to server machine itself. so server
invoke the request. If any service is running in port 80, is called and response is send back to
client using same secure channel. so browser shows server webpage in client side.

[dynamic]

We know that from client machine (192.168.56.101), the IP address 10.10.1.11 is non routable. but
now if we issue http://10.10.1.11/ in Firefox browser, its shows the 10.10.1.11 Apache server
webpage.

Advantage :

  * One proxy server is enough to access the all services of remote machine and its sub-net
    services

Disadvantage:

  * We need to configure the Proxy settings in client application, If application doesn't support
    the proxy then we can't access the service.

Local Port Forwarding

Command :        ssh       -L  8000:localhost:80     ramki@192.168.56.102

here syntax is   -L   <local port> : <remote hostname> : <remote service port>

so when we execute the command, its bind port 8000 in client side. now what are request send to
port 6000 its redirect to ssh client, then encrypt and send to server machine. now server directly
delivered the data to port 80.

In dynamic tunnel, server checks the packet and decide where we need to send the packet, for
example http://localhost/ then its send to 80, smtp then send to 25. But in local port it always
send to single port which one we mention during setup the local port forwarding <remote hostname> :
<remote service port>

this time in Firefox no need to configure the proxy, clear the proxy(if its present)
and type in address bar  http://localhost:8000/
then HTTP request is going to local port 8000, then its redirect and send to server. server
directly send to port 80. (Its based on <remote hostname> : <remote service port>, here now
localhost:80)

[local1]

If u want to access the 10.10.1.11 machine http service then we need to setup new local port
forwarding.
we can't use prior port forwarding. because old one always pointing to localhost:80.

Command :             ssh   -L  8000:10.10.1.11:80   ramki@192.168.56.102

now client side local port 8000 is redirected to 10.10.1.11:80 machine via 192.168.56.102.

In Firefox using http://localhost:8080/ we can access the 10.10.1.11 machine http service.

(For further reference check the video below. in video i show the how to access remote desktop
using VNC)

[local2]

Advantage:

  * no need to configure the proxy setting

Disadvantage:

  * Each service we need to setup different local port forwarding, (i.e for example, 2 port
    forwarding is needed to get 192.168.56.102 and 10.10.1.11 http services)

Remote Port Forwarding

Remote port forwarding is same like local port forwarding. but this time we need to set the port
forwarding in server side(192.168.56.102), not client side

Command :        ssh    -R 8000:localhost:80       ramki@192.168.56.101
here very important changes is from server we going to connect client, so  ramki@192.168.56.101
 here its 192.168.56.101 not 102.

when we execute this command its connect to client and create 8000 port in client side(not server
side).
as usual client use its local port 8000 to connect server. like local port forwarding.

Why Remote Port Forwarding is Important?
    Its rarely used, when we worked the machine. that machine is inside the NAT. so from outside no
one can access it. that kind of situation physically access the machine and connect back to our
client system (192.168.56.101) using remote port forward. then from client machine we can access
the services.(Its seems to be little bit confusing, but its simple)

In Windows Machine
   In windows machine if want to run ssh server then there is lots of ssh servers are available
WinSSHD freeSSHd, openssh. If we want only ssh client then we can use Putty.

suppose in System(192.168.56.101) i am using Windows then how we access the ssh tunneling.

open the putty and type the host ramki@192.168.56.102 and select Connection->SSH->Tunnels (see the
image), then type 8080 in source port and select Dynamic, if u want dynamic tunnel (Its equal to -D
8080 in command option)

[putty]

If we want local port forwarding then put any unused port 6000 in source port and destination is
localhost:80 and select Local. (Its equal to -L 6000:localhost:80)

[putty1]

If u want to access 10.10.1.11 machine  the remote desktop then make local port forward (check
above image) and Destination is 10.10.1.11:5900 here 5900 is the port used by vnc server. then
using any vnc client (here i used tightvnc client) to connect ur local port 6000
so mention localhost::6000,   here we need to mention double colon ::, because in vnc client port
no is specified in this manner. (Check the video )

[vnc]

Bypass Firewall
                 This SSH Tunnel concept can be use to bypass firewall. lets consider the scenario.
In server side its enable firewall and some service are running and these services are can access
through localhost or same machine. but u can't access through remote machine. because firewall
block the all the port except ssh port (22).

this kind of situation we use tunnel and almost all services can be accessed from outside. because
firewall is rule based. In firewall perspective all traffic is goes through port 22. so its
allowed. but internally we made tunnel and access all services.

How to prevent SSH Tunnel
      Open the ssh server config file /etc/ssh/sshd_config  then set the parameter
AllowTcpForwarding no
then restart ssh service. then they not allow the ssh tunnel service, but still we can access ssh
shell service.

But in ssh man page they clearly mentioned

" Note that disabling TCP forwarding does not improve security unless users are also denied shell
access, as they can always install their own forwarders. "
so still we can use use ssh tunnel even though  we set AllowTcpForwarding no. (I will show in my
next post)

I hope everything is clear. If any misunderstanding please let me know.

Screen cast (Watch in HD)

Resources:

  * SSH, The Secure Shell: The Definitive Guide

Comments Welcomed

  * Twitter
  * Facebook
  * Google
  * Tumblr
  * Pinterest

Artikel Menarik Lainnya

Next
« Prev Post
Previous
Next Post »

#

Google+ Badge

Total Pageviews

#

Popular Posts

  * [outline_st]
    Virtual Host + Apache httpd server + Tomcat + mod_jk connector
    In my last post ( Virtual Host in Tomcat ) we discussed about how setup the virtual host in
    Tomcat. Its cost effective technique because on...

  * [virtual_ho]
    Understanding Virtual Host Concept in Tomcat
    Hi in this post we will see how to setup virtual host in Apache Tomcat server. Virtual Host is
    in-built feature that allows to deploy multi...

  * [normal_dep]
    Tomcat Clustering Series Part 1 : Simple Load Balancer
    I am going to start new series of posts about Tomcat clustering . In this first post we will
    see what is problem in normal deployment in on...

  * [scenario]
    How to do SSH Tunneling (Port Forwarding) - Screen-cast
    In this post we will see how ssh works?, what is SSH tunneling? what is important of ssh
    tunnels and how to setup the ssh tunnel. When SS...

  * [jasperrepo]
    JSF + JPA + JasperReports (iReport) Part 1
    Hi in this post we will see the overview of  JasperReports  and how to integrate into JSF
    application. JasperReports is the world's mo...

  * [tomcat_str]
    Running Multiple Tomcat Instances on Single Machine
    In this post we will see how to run multiple tomcat instances on single machine and under
    single user account. We first see the  tomcat di...

  * [default]
    File Upload is Easy in JSF2.2
    To bring the File Upload feature in Java based web application is one of the difficult and
    complex job, we need to dependent on 3rd party l...

  * [session-re]
    Tomcat Clustering Series Part 3 : Session Replication
    Hi this is my third part of the  Tomcat Clustering Series . In this post we are going to
    discuss the how to setup session replication in t...

  * [tomcat_sim]
    Tomcat Clustering Series Part 5 : NginX as Load Balancer
    Hi this is my fifth part of the  Tomcat Clustering Series . In this post we are going to
    discuss how to replace Apache httpd load balancer ...

  * [sample_app]
    Beware of SQLInjection in Java Application
    Hi In this post we will discuss what is SQL Injection attack. and how its may affect ur any
     web application its use the backend database...

#

Blog Archive

  * ►  2016 ( 1 )
      + ►  February ( 1 )

  * ►  2015 ( 2 )
      + ►  November ( 1 )
      + ►  October ( 1 )

  * ►  2013 ( 4 )
      + ►  August ( 1 )
      + ►  June ( 2 )
      + ►  January ( 1 )

  * ▼  2012 ( 13 )
      + ►  December ( 1 )
      + ►  November ( 1 )
      + ►  October ( 2 )
      + ►  September ( 2 )
      + ►  June ( 2 )
      + ▼  April ( 2 )
          o How to do SSH Tunneling (Port Forwarding) - Screen...
          o How to compile kernel step by step
      + ►  March ( 1 )
      + ►  February ( 1 )
      + ►  January ( 1 )

  * ►  2011 ( 9 )
      + ►  December ( 1 )
      + ►  November ( 1 )
      + ►  July ( 3 )
      + ►  June ( 4 )

  * ►  2010 ( 7 )
      + ►  December ( 3 )
      + ►  November ( 4 )

#

Labels

screencast ( 26 ) Java EE 6 ( 10 ) JSF 2.0 ( 7 ) multiple_instances ( 7 ) JSF ( 6 ) load balancer (
6 ) tomcat clustering ( 6 ) JasperReports ( 5 ) Java EE 7 ( 5 ) Linux ( 4 ) session replication ( 4
) iReport ( 3 ) IoT ( 2 ) Raspberry Pi ( 2 ) mqtt ( 2 ) nginx ( 2 )
#

Follow by Email

[                    ]                                                                      Submit

#

JCG

"java

#

Powered by Blogger.

#

#

About Me

My Photo

Rama krishnnan EP

View my complete profile
#

Copyright © 2015 Ramki Blog - All Rights Reserved - Template by Arlina Design | Distributed By
Gooyaabi Templates
Design by Libs Blogger

#+end_example
** DONE ssh reverse tunnel
  CLOSED: [2016-10-10 Mon 14:23]
https://www.howtoforge.com/reverse-ssh-tunneling
http://www.thegeekstuff.com/2013/11/reverse-ssh-tunnel/
http://xmodulo.com/access-linux-server-behind-nat-reverse-ssh-tunnel.html

# aliyun: reverse ssh tunnel
# ssh -p 29995 root@123.57.240.189; ssh -p 29997 root@123.57.240.189
autossh -M 40000 -p 2702 -i /home/denny/al -fN -o "PubkeyAuthentication=yes" -o "StrictHostKeyChecking=false" -o "PasswordAuthentication=no" -o "ServerAliveInterval 60" -o "ServerAliveCountMax 3" -R 123.57.240.189:29995:localhost:22 root@123.57.240.189

autossh -M 40004 -p 2702 -i /home/denny/al -fN -o "PubkeyAuthentication=yes" -o "StrictHostKeyChecking=false" -o "PasswordAuthentication=no" -o "ServerAliveInterval 60" -o "ServerAliveCountMax 3" -R 123.57.240.189:29997:localhost:22 root@123.57.240.189
** DONE ssh no host key: ssh -i $ssh_key_file -o StrictHostKeyChecking=no $ssh_username@$server_ip mkdir -p /etc/chef
   CLOSED: [2014-10-03 Fri 19:47]
** DONE Mac Laptop Disable SSH Host Key Checking
  CLOSED: [2016-09-21 Wed 13:54]
Host *
   StrictHostKeyChecking no
   UserKnownHostsFile=/dev/null

mac /etc/ssh_config

http://www.shellhacks.com/en/HowTo-Disable-SSH-Host-Key-Checking
** DONE SSH security – weak ciphers and mac algorithms
  CLOSED: [2017-01-23 Mon 15:07]
/etc/ssh/sshd_config: Ciphers and MACs sections
http://linux.uits.uconn.edu/2014/06/25/ssh-weak-ciphers-and-mac-algorithms/
https://www.ssh.com/manuals/server-admin/44/Ciphers_and_MACs.html
http://blog.xuite.net/magurayu/wretch/417764135-SSH+Weak+Algorithms+Supported

ssh -vvv -p 2702 root@45.33.87.74 date 2>&1 | grep cipher

arcfour
*** [#A] error message: 90317 - SSH Weak Algorithms Supported
Synopsis
The remote SSH server is configured to allow weak encryption algorithms or no algorithm at all.
Description
Nessus has detected that the remote SSH server is configured to use the Arcfour stream cipher or no cipher at all. RFC 4253 advises against using Arcfour due to an issue with weak keys.
See Also
https://tools.ietf.org/html/rfc4253#section-6.3
*** TODO 71049 - SSH Weak MAC Algorithms Enabled
Synopsis
The remote SSH server is configured to allow MD5 and 96-bit MAC algorithms.
Description
The remote SSH server is configured to allow either MD5 or 96-bit MAC algorithms, both of which are considered weak.

Note that this plugin only checks for the options of the SSH server, and it does not check for vulnerable software versions.
*** How to fix: SSH Weak Algorithms Supported
#+BEGIN_EXAMPLE
在ssh_config及sshd_config加入以下兩行

Ciphers aes256-ctr,aes192-ctr,aes128-ctr,aes256-cbc,aes192-cbc,aes128-cbc,3des-cbc
MACs hmac-sha1
#+END_EXAMPLE
*** Ciphers: The system will attempt to use the different encryption ciphers in the sequence specified on the line
https://www.ssh.com/manuals/server-admin/44/Ciphers_and_MACs.html

https://tools.ietf.org/html/rfc4253#section-6.3

An encryption algorithm and a key will be negotiated during the key
   exchange.  When encryption is in effect, the packet length, padding
   length, payload, and padding fields of each packet MUST be encrypted
   with the given algorithm.

   The encrypted data in all packets sent in one direction SHOULD be
   considered a single data stream.  For example, initialization vectors
   SHOULD be passed from the end of one packet to the beginning of the
   next packet.  All ciphers SHOULD use keys with an effective key
   length of 128 bits or more.

   The ciphers in each direction MUST run independently of each other.
   Implementations MUST allow the algorithm for each direction to be
   independently selected, if multiple algorithms are allowed by local
   policy.  In practice however, it is RECOMMENDED that the same
   algorithm be used in both directions.
*** MAC (Message Authentication Code)
The system will attempt to use the different HMAC algorithms in the sequence they are specified on the line.

https://www.ssh.com/manuals/server-admin/44/Ciphers_and_MACs.html

https://tools.ietf.org/html/rfc4253#section-6.4

6.4.  Data Integrity

   Data integrity is protected by including with each packet a MAC that
   is computed from a shared secret, packet sequence number, and the
   contents of the packet.

   The message authentication algorithm and key are negotiated during
   key exchange.  Initially, no MAC will be in effect, and its length
   MUST be zero.  After key exchange, the 'mac' for the selected MAC
   algorithm will be computed before encryption from the concatenation
   of packet data:

      mac = MAC(key, sequence_number || unencrypted_packet)

   where unencrypted_packet is the entire packet without 'mac' (the
   length fields, 'payload' and 'random padding'), and sequence_number
   is an implicit packet sequence number represented as uint32.  The
   sequence_number is initialized to zero for the first packet, and is
   incremented after every packet (regardless of whether encryption or
   MAC is in use).  It is never reset, even if keys/algorithms are
   renegotiated later.  It wraps around to zero after every 2^32
   packets.  The packet sequence_number itself is not included in the
   packet sent over the wire.

   The MAC algorithms for each direction MUST run independently, and
   implementations MUST allow choosing the algorithm independently for
   both directions.  In practice however, it is RECOMMENDED that the
   same algorithm be used in both directions.

   The value of 'mac' resulting from the MAC algorithm MUST be
   transmitted without encryption as the last part of the packet.  The
   number of 'mac' bytes depends on the algorithm chosen.
** DONE ssh security: 70658 - SSH Server CBC Mode Ciphers Enabled
   CLOSED: [2017-01-23 Mon 15:29]
https://developer.ibm.com/answers/questions/187318/faq-how-do-i-disable-cipher-block-chaining-cbc-mod.html
*** error message
70658 - SSH Server CBC Mode Ciphers Enabled	[-/+]
Synopsis
The SSH server is configured to use Cipher Block Chaining.
Description
The SSH server is configured to support Cipher Block Chaining (CBC) encryption. This may allow an attacker to recover the plaintext message from the ciphertext.

Note that this plugin only checks for the options of the SSH server and does not check for vulnerable software versions.
** DONE ssh security: hide linux OS version
  CLOSED: [2017-01-23 Mon 15:56]
http://serverfault.com/questions/216801/prevent-ssh-from-advertising-its-version-number

While it's prohibitively difficult to hide the version number of your SSH daemon, you can easily hide the linux version (Debian-3ubuntu4)

Add the following line to /etc/ssh/sshd_config

DebianBanner no

From:
#+BEGIN_EXAMPLE
debug1: Local version string SSH-2.0-OpenSSH_7.3
debug1: Remote protocol version 2.0, remote software version OpenSSH_6.6.1p1 Ubuntu-2ubuntu2.8
debug1: match: OpenSSH_6.6.1p1 Ubuntu-2ubuntu2.8 pat OpenSSH_6.6.1* compat 0x04000000
#+END_EXAMPLE

To:
#+BEGIN_EXAMPLE
debug1: Local version string SSH-2.0-OpenSSH_7.3
debug1: Remote protocol version 2.0, remote software version OpenSSH_6.6.1p1
#+END_EXAMPLE
** TODO ssh security: 10267 - SSH Server Type and Version Information
https://www.cyberciti.biz/faq/howto-ssh-server-hide-version-number-sshd_config/
OpenSSH Hide Version Number From Clients

#+BEGIN_EXAMPLE
10267 - SSH Server Type and Version Information	[-/+]
Synopsis
An SSH server is listening on this port.
Description
It is possible to obtain information about the remote SSH server by sending an empty authentication request.
#+END_EXAMPLE
** TODO ssh security: 70657 - SSH Algorithms and Languages Supported
https://www.tenable.com/plugins/index.php?view=single&id=70657
#+BEGIN_EXAMPLE
70657 - SSH Algorithms and Languages Supported	[-/+]
Synopsis
An SSH server is listening on this port.
Description
This script detects which algorithms and languages are supported by the remote service for encrypting communications.
Solution
n/a
Risk Factor
None
Plugin Information:
Publication date: 2013/10/28, Modification date: 2014/04/04
Ports
tcp/2702

Nessus negotiated the following encryption algorithm with the server : aes128-cbc

The server supports the following options for kex_algorithms :

curve25519-sha256@libssh.org
diffie-hellman-group-exchange-sha1
diffie-hellman-group-exchange-sha256
diffie-hellman-group1-sha1
diffie-hellman-group14-sha1
ecdh-sha2-nistp256
ecdh-sha2-nistp384
ecdh-sha2-nistp521

The server supports the following options for server_host_key_algorithms :

ecdsa-sha2-nistp256
ssh-dss
ssh-ed25519
ssh-rsa

The server supports the following options for encryption_algorithms_client_to_server :

3des-cbc
aes128-cbc
aes128-ctr
aes128-gcm@openssh.com
aes192-cbc
aes192-ctr
aes256-cbc
aes256-ctr
aes256-gcm@openssh.com
arcfour
arcfour128
arcfour256
blowfish-cbc
cast128-cbc
chacha20-poly1305@openssh.com
rijndael-cbc@lysator.liu.se

The server supports the following options for encryption_algorithms_server_to_client :

3des-cbc
aes128-cbc
aes128-ctr
aes128-gcm@openssh.com
aes192-cbc
aes192-ctr
aes256-cbc
aes256-ctr
aes256-gcm@openssh.com
arcfour
arcfour128
arcfour256
blowfish-cbc
cast128-cbc
chacha20-poly1305@openssh.com
rijndael-cbc@lysator.liu.se

The server supports the following options for mac_algorithms_client_to_server :

hmac-md5
hmac-md5-96
hmac-md5-96-etm@openssh.com
hmac-md5-etm@openssh.com
hmac-ripemd160
hmac-ripemd160-etm@openssh.com
hmac-ripemd160@openssh.com
hmac-sha1
hmac-sha1-96
hmac-sha1-96-etm@openssh.com
hmac-sha1-etm@openssh.com
hmac-sha2-256
hmac-sha2-256-etm@openssh.com
hmac-sha2-512
hmac-sha2-512-etm@openssh.com
umac-128-etm@openssh.com
umac-128@openssh.com
umac-64-etm@openssh.com
umac-64@openssh.com

The server supports the following options for mac_algorithms_server_to_client :

hmac-md5
hmac-md5-96
hmac-md5-96-etm@openssh.com
hmac-md5-etm@openssh.com
hmac-ripemd160
hmac-ripemd160-etm@openssh.com
hmac-ripemd160@openssh.com
hmac-sha1
hmac-sha1-96
hmac-sha1-96-etm@openssh.com
hmac-sha1-etm@openssh.com
hmac-sha2-256
hmac-sha2-256-etm@openssh.com
hmac-sha2-512
hmac-sha2-512-etm@openssh.com
umac-128-etm@openssh.com
umac-128@openssh.com
umac-64-etm@openssh.com
umac-64@openssh.com

The server supports the following options for compression_algorithms_client_to_server :

none
zlib@openssh.com

The server supports the following options for compression_algorithms_server_to_client :

none
zlib@openssh.com
#+END_EXAMPLE
** TODO ssh security: 10881 - SSH Protocol Versions Supported
#+BEGIN_EXAMPLE
	10881 - SSH Protocol Versions Supported	[-/+]
Synopsis
A SSH server is running on the remote host.
Description
This plugin determines the versions of the SSH protocol supported by the remote SSH daemon.
Solution
n/a
Risk Factor
None
Plugin Information:
Publication date: 2002/03/06, Modification date: 2013/10/21
Ports
tcp/2702
The remote SSH daemon supports the following versions of the
SSH protocol :

- 1.99
- 2.0
#+END_EXAMPLE
** DONE fail to ssh: No supported key exchange algorithms: /etc/ssh/ssh_host_rsa_key is zero length
  CLOSED: [2017-04-17 Mon 20:50]
http://serverfault.com/questions/158151/sshd-shuts-down-with-no-supported-key-exchange-algorithms-error

/etc/ssh/ssh_host_rsa_key is zero length

#+BEGIN_EXAMPLE
I ran into this problem on Fedora. Eventually I noticed:

root@wisdom:/etc/ssh# ll
total 268K
drwxr-xr-x.   2 root root     4.0K Jun 30 06:06 ./
drwxr-xr-x. 128 root root      12K Jun 30 05:15 ../
-rw-r--r--.   1 root root     237K Jun  8 23:30 moduli
-rw-r--r--.   1 root root     2.2K Jun  8 23:30 ssh_config
-rw-------.   1 root root     4.3K Jun 30 06:03 sshd_config
-rw-r-----.   1 root ssh_keys    0 Jun 27 00:46 ssh_host_ecdsa_key
-rw-r--r--.   1 root root        0 Jun 27 00:46 ssh_host_ecdsa_key.pub
-rw-r-----.   1 root ssh_keys    0 Jun 27 00:46 ssh_host_ed25519_key
-rw-r--r--.   1 root root        0 Jun 27 00:46 ssh_host_ed25519_key.pub
-rw-r-----.   1 root ssh_keys    0 Jun 27 00:46 ssh_host_rsa_key
-rw-r--r--.   1 root root        0 Jun 27 00:46 ssh_host_rsa_key.pub
The key files are zero length! I generated new key pairs and it fixed the problem:

ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key
ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key
ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key
#+END_EXAMPLE
** DONE ssh-keygen run without interaction: ssh-keygen -t rsa -f /tmp/sshkey -q -N ""
  CLOSED: [2017-05-11 Thu 17:19]
https://unix.stackexchange.com/questions/69314/automated-ssh-keygen-without-passphrase-how
** DONE Add passphrase protection to your ssh deploy key
  CLOSED: [2017-06-12 Mon 16:47]
https://github.com/jcalazan/ansible-django-stack/issues/11
https://coderwall.com/p/rdi_wq/fix-could-not-open-a-connection-to-your-authentication-agent-when-using-ssh-add
https://bitbucket.org/nubesecure/devops/issues/106/nightly-deployment-process-should-pull

eval $(ssh-agent)

ssh-agent
ssh-add /root/.ssh/bitbucket_id_rsa

soteriaDevOps123
ssh -i /var/jenkins_home/.ssh/id_rsa -p 2702 root@iot.shibgeek.com "cd /opt/soteria/chatops/devops; git pull"

SSH_AUTH_SOCK=/tmp/ssh-CQvj4eoYn5ha/agent.2340
export SSH_AUTH_SOCK
SSH_AGENT_PID=2340; export SSH_AGENT_PID;

cd /tmp/sandbox/devops
git pull

ssh -i /var/jenkins_home/.ssh/id_rsa -p 2702 root@iot.shibgeek.com "export SSH_AUTH_SOCK=/tmp/ssh-CQvj4eoYn5ha/agent.2340; export SSH_AGENT_PID=2340; cd /tmp/sandbox/devops; git pull"

> /usr/sbin/git_pull_codedir.sh && vim /usr/sbin/git_pull_codedir.sh
bash git_pull_codedir.sh "/tmp/sandbox/devops"
** DONE Show error for ssh login
  CLOSED: [2017-09-04 Mon 10:41]
https://askubuntu.com/questions/586806/aws-ec2-set-up-key-and-non-key-authentication-at-same-time
no-port-forwarding,no-agent-forwarding,no-X11-forwarding,command="echo 'Please login as the user \"ubuntu\" rather than the user \"root\".';echo;sleep 10"
** DONE SCP from one external server to another
   CLOSED: [2018-01-23 Tue 10:04]
https://unix.stackexchange.com/questions/184379/scp-from-one-server-to-another-server
https://superuser.com/questions/66949/scp-from-one-external-server-to-another

